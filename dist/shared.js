/*! For license information please see shared.js.LICENSE.txt */
"use strict";(self.webpackChunknews=self.webpackChunknews||[]).push([["shared"],{"./node_modules/@popperjs/core/lib/createPopper.js":(e,t,o)=>{o.r(t),o.d(t,{createPopper:()=>w,detectOverflow:()=>m.default,popperGenerator:()=>y});var s=o("./node_modules/@popperjs/core/lib/dom-utils/getCompositeRect.js"),i=o("./node_modules/@popperjs/core/lib/dom-utils/getLayoutRect.js"),n=o("./node_modules/@popperjs/core/lib/dom-utils/listScrollParents.js"),r=o("./node_modules/@popperjs/core/lib/dom-utils/getOffsetParent.js"),l=o("./node_modules/@popperjs/core/lib/dom-utils/getComputedStyle.js"),a=o("./node_modules/@popperjs/core/lib/utils/orderModifiers.js"),d=o("./node_modules/@popperjs/core/lib/utils/debounce.js"),c=o("./node_modules/@popperjs/core/lib/utils/validateModifiers.js"),u=o("./node_modules/@popperjs/core/lib/utils/uniqueBy.js"),p=o("./node_modules/@popperjs/core/lib/utils/getBasePlacement.js"),f=o("./node_modules/@popperjs/core/lib/utils/mergeByName.js"),m=o("./node_modules/@popperjs/core/lib/utils/detectOverflow.js"),h=o("./node_modules/@popperjs/core/lib/dom-utils/instanceOf.js"),g=o("./node_modules/@popperjs/core/lib/enums.js"),_="Popper: Invalid reference or popper argument provided. They must be either a DOM element or virtual element.",b="Popper: An infinite loop in the modifiers cycle has been detected! The cycle has been interrupted to prevent a browser crash.",v={placement:"bottom",modifiers:[],strategy:"absolute"};function j(){for(var e=arguments.length,t=new Array(e),o=0;o<e;o++)t[o]=arguments[o];return!t.some((function(e){return!(e&&"function"==typeof e.getBoundingClientRect)}))}function y(e){void 0===e&&(e={});var t=e,o=t.defaultModifiers,m=void 0===o?[]:o,y=t.defaultOptions,w=void 0===y?v:y;return function(e,t,o){void 0===o&&(o=w);var y={placement:"bottom",orderedModifiers:[],options:Object.assign({},v,w),modifiersData:{},elements:{reference:e,popper:t},attributes:{},styles:{}},E=[],A=!1,O={state:y,setOptions:function(o){var s="function"==typeof o?o(y.options):o;C(),y.options=Object.assign({},w,y.options,s),y.scrollParents={reference:(0,h.isElement)(e)?(0,n.default)(e):e.contextElement?(0,n.default)(e.contextElement):[],popper:(0,n.default)(t)};var i=(0,a.default)((0,f.default)([].concat(m,y.options.modifiers)));y.orderedModifiers=i.filter((function(e){return e.enabled}));var r=(0,u.default)([].concat(i,y.options.modifiers),(function(e){return e.name}));(0,c.default)(r),(0,p.default)(y.options.placement)===g.auto&&(y.orderedModifiers.find((function(e){return"flip"===e.name}))||console.error(['Popper: "auto" placements require the "flip" modifier be',"present and enabled to work."].join(" ")));var d=(0,l.default)(t);return[d.marginTop,d.marginRight,d.marginBottom,d.marginLeft].some((function(e){return parseFloat(e)}))&&console.warn(['Popper: CSS "margin" styles cannot be used to apply padding',"between the popper and its reference element or boundary.","To replicate margin, use the `offset` modifier, as well as","the `padding` option in the `preventOverflow` and `flip`","modifiers."].join(" ")),y.orderedModifiers.forEach((function(e){var t=e.name,o=e.options,s=void 0===o?{}:o,i=e.effect;if("function"==typeof i){var n=i({state:y,name:t,instance:O,options:s}),r=function(){};E.push(n||r)}})),O.update()},forceUpdate:function(){if(!A){var e=y.elements,t=e.reference,o=e.popper;if(j(t,o)){y.rects={reference:(0,s.default)(t,(0,r.default)(o),"fixed"===y.options.strategy),popper:(0,i.default)(o)},y.reset=!1,y.placement=y.options.placement,y.orderedModifiers.forEach((function(e){return y.modifiersData[e.name]=Object.assign({},e.data)}));for(var n=0,l=0;l<y.orderedModifiers.length;l++){if((n+=1)>100){console.error(b);break}if(!0!==y.reset){var a=y.orderedModifiers[l],d=a.fn,c=a.options,u=void 0===c?{}:c,p=a.name;"function"==typeof d&&(y=d({state:y,options:u,name:p,instance:O})||y)}else y.reset=!1,l=-1}}else console.error(_)}},update:(0,d.default)((function(){return new Promise((function(e){O.forceUpdate(),e(y)}))})),destroy:function(){C(),A=!0}};if(!j(e,t))return console.error(_),O;function C(){E.forEach((function(e){return e()})),E=[]}return O.setOptions(o).then((function(e){!A&&o.onFirstUpdate&&o.onFirstUpdate(e)})),O}}var w=y()},"./node_modules/@popperjs/core/lib/dom-utils/contains.js":(e,t,o)=>{o.r(t),o.d(t,{default:()=>i});var s=o("./node_modules/@popperjs/core/lib/dom-utils/instanceOf.js");function i(e,t){var o=t.getRootNode&&t.getRootNode();if(e.contains(t))return!0;if(o&&(0,s.isShadowRoot)(o)){var i=t;do{if(i&&e.isSameNode(i))return!0;i=i.parentNode||i.host}while(i)}return!1}},"./node_modules/@popperjs/core/lib/dom-utils/getBoundingClientRect.js":(e,t,o)=>{o.r(t),o.d(t,{default:()=>l});var s=o("./node_modules/@popperjs/core/lib/dom-utils/instanceOf.js"),i=o("./node_modules/@popperjs/core/lib/utils/math.js"),n=o("./node_modules/@popperjs/core/lib/dom-utils/getWindow.js"),r=o("./node_modules/@popperjs/core/lib/dom-utils/isLayoutViewport.js");function l(e,t,o){void 0===t&&(t=!1),void 0===o&&(o=!1);var l=e.getBoundingClientRect(),a=1,d=1;t&&(0,s.isHTMLElement)(e)&&(a=e.offsetWidth>0&&(0,i.round)(l.width)/e.offsetWidth||1,d=e.offsetHeight>0&&(0,i.round)(l.height)/e.offsetHeight||1);var c=((0,s.isElement)(e)?(0,n.default)(e):window).visualViewport,u=!(0,r.default)()&&o,p=(l.left+(u&&c?c.offsetLeft:0))/a,f=(l.top+(u&&c?c.offsetTop:0))/d,m=l.width/a,h=l.height/d;return{width:m,height:h,top:f,right:p+m,bottom:f+h,left:p,x:p,y:f}}},"./node_modules/@popperjs/core/lib/dom-utils/getClippingRect.js":(e,t,o)=>{o.r(t),o.d(t,{default:()=>b});var s=o("./node_modules/@popperjs/core/lib/enums.js"),i=o("./node_modules/@popperjs/core/lib/dom-utils/getViewportRect.js"),n=o("./node_modules/@popperjs/core/lib/dom-utils/getDocumentRect.js"),r=o("./node_modules/@popperjs/core/lib/dom-utils/listScrollParents.js"),l=o("./node_modules/@popperjs/core/lib/dom-utils/getOffsetParent.js"),a=o("./node_modules/@popperjs/core/lib/dom-utils/getDocumentElement.js"),d=o("./node_modules/@popperjs/core/lib/dom-utils/getComputedStyle.js"),c=o("./node_modules/@popperjs/core/lib/dom-utils/instanceOf.js"),u=o("./node_modules/@popperjs/core/lib/dom-utils/getBoundingClientRect.js"),p=o("./node_modules/@popperjs/core/lib/dom-utils/getParentNode.js"),f=o("./node_modules/@popperjs/core/lib/dom-utils/contains.js"),m=o("./node_modules/@popperjs/core/lib/dom-utils/getNodeName.js"),h=o("./node_modules/@popperjs/core/lib/utils/rectToClientRect.js"),g=o("./node_modules/@popperjs/core/lib/utils/math.js");function _(e,t,o){return t===s.viewport?(0,h.default)((0,i.default)(e,o)):(0,c.isElement)(t)?function(e,t){var o=(0,u.default)(e,!1,"fixed"===t);return o.top=o.top+e.clientTop,o.left=o.left+e.clientLeft,o.bottom=o.top+e.clientHeight,o.right=o.left+e.clientWidth,o.width=e.clientWidth,o.height=e.clientHeight,o.x=o.left,o.y=o.top,o}(t,o):(0,h.default)((0,n.default)((0,a.default)(e)))}function b(e,t,o,s){var i="clippingParents"===t?function(e){var t=(0,r.default)((0,p.default)(e)),o=["absolute","fixed"].indexOf((0,d.default)(e).position)>=0&&(0,c.isHTMLElement)(e)?(0,l.default)(e):e;return(0,c.isElement)(o)?t.filter((function(e){return(0,c.isElement)(e)&&(0,f.default)(e,o)&&"body"!==(0,m.default)(e)})):[]}(e):[].concat(t),n=[].concat(i,[o]),a=n[0],u=n.reduce((function(t,o){var i=_(e,o,s);return t.top=(0,g.max)(i.top,t.top),t.right=(0,g.min)(i.right,t.right),t.bottom=(0,g.min)(i.bottom,t.bottom),t.left=(0,g.max)(i.left,t.left),t}),_(e,a,s));return u.width=u.right-u.left,u.height=u.bottom-u.top,u.x=u.left,u.y=u.top,u}},"./node_modules/@popperjs/core/lib/dom-utils/getCompositeRect.js":(e,t,o)=>{o.r(t),o.d(t,{default:()=>u});var s=o("./node_modules/@popperjs/core/lib/dom-utils/getBoundingClientRect.js"),i=o("./node_modules/@popperjs/core/lib/dom-utils/getNodeScroll.js"),n=o("./node_modules/@popperjs/core/lib/dom-utils/getNodeName.js"),r=o("./node_modules/@popperjs/core/lib/dom-utils/instanceOf.js"),l=o("./node_modules/@popperjs/core/lib/dom-utils/getWindowScrollBarX.js"),a=o("./node_modules/@popperjs/core/lib/dom-utils/getDocumentElement.js"),d=o("./node_modules/@popperjs/core/lib/dom-utils/isScrollParent.js"),c=o("./node_modules/@popperjs/core/lib/utils/math.js");function u(e,t,o){void 0===o&&(o=!1);var u=(0,r.isHTMLElement)(t),p=(0,r.isHTMLElement)(t)&&function(e){var t=e.getBoundingClientRect(),o=(0,c.round)(t.width)/e.offsetWidth||1,s=(0,c.round)(t.height)/e.offsetHeight||1;return 1!==o||1!==s}(t),f=(0,a.default)(t),m=(0,s.default)(e,p,o),h={scrollLeft:0,scrollTop:0},g={x:0,y:0};return(u||!u&&!o)&&(("body"!==(0,n.default)(t)||(0,d.default)(f))&&(h=(0,i.default)(t)),(0,r.isHTMLElement)(t)?((g=(0,s.default)(t,!0)).x+=t.clientLeft,g.y+=t.clientTop):f&&(g.x=(0,l.default)(f))),{x:m.left+h.scrollLeft-g.x,y:m.top+h.scrollTop-g.y,width:m.width,height:m.height}}},"./node_modules/@popperjs/core/lib/dom-utils/getComputedStyle.js":(e,t,o)=>{o.r(t),o.d(t,{default:()=>i});var s=o("./node_modules/@popperjs/core/lib/dom-utils/getWindow.js");function i(e){return(0,s.default)(e).getComputedStyle(e)}},"./node_modules/@popperjs/core/lib/dom-utils/getDocumentElement.js":(e,t,o)=>{o.r(t),o.d(t,{default:()=>i});var s=o("./node_modules/@popperjs/core/lib/dom-utils/instanceOf.js");function i(e){return(((0,s.isElement)(e)?e.ownerDocument:e.document)||window.document).documentElement}},"./node_modules/@popperjs/core/lib/dom-utils/getDocumentRect.js":(e,t,o)=>{o.r(t),o.d(t,{default:()=>a});var s=o("./node_modules/@popperjs/core/lib/dom-utils/getDocumentElement.js"),i=o("./node_modules/@popperjs/core/lib/dom-utils/getComputedStyle.js"),n=o("./node_modules/@popperjs/core/lib/dom-utils/getWindowScrollBarX.js"),r=o("./node_modules/@popperjs/core/lib/dom-utils/getWindowScroll.js"),l=o("./node_modules/@popperjs/core/lib/utils/math.js");function a(e){var t,o=(0,s.default)(e),a=(0,r.default)(e),d=null==(t=e.ownerDocument)?void 0:t.body,c=(0,l.max)(o.scrollWidth,o.clientWidth,d?d.scrollWidth:0,d?d.clientWidth:0),u=(0,l.max)(o.scrollHeight,o.clientHeight,d?d.scrollHeight:0,d?d.clientHeight:0),p=-a.scrollLeft+(0,n.default)(e),f=-a.scrollTop;return"rtl"===(0,i.default)(d||o).direction&&(p+=(0,l.max)(o.clientWidth,d?d.clientWidth:0)-c),{width:c,height:u,x:p,y:f}}},"./node_modules/@popperjs/core/lib/dom-utils/getHTMLElementScroll.js":(e,t,o)=>{function s(e){return{scrollLeft:e.scrollLeft,scrollTop:e.scrollTop}}o.r(t),o.d(t,{default:()=>s})},"./node_modules/@popperjs/core/lib/dom-utils/getLayoutRect.js":(e,t,o)=>{o.r(t),o.d(t,{default:()=>i});var s=o("./node_modules/@popperjs/core/lib/dom-utils/getBoundingClientRect.js");function i(e){var t=(0,s.default)(e),o=e.offsetWidth,i=e.offsetHeight;return Math.abs(t.width-o)<=1&&(o=t.width),Math.abs(t.height-i)<=1&&(i=t.height),{x:e.offsetLeft,y:e.offsetTop,width:o,height:i}}},"./node_modules/@popperjs/core/lib/dom-utils/getNodeName.js":(e,t,o)=>{function s(e){return e?(e.nodeName||"").toLowerCase():null}o.r(t),o.d(t,{default:()=>s})},"./node_modules/@popperjs/core/lib/dom-utils/getNodeScroll.js":(e,t,o)=>{o.r(t),o.d(t,{default:()=>l});var s=o("./node_modules/@popperjs/core/lib/dom-utils/getWindowScroll.js"),i=o("./node_modules/@popperjs/core/lib/dom-utils/getWindow.js"),n=o("./node_modules/@popperjs/core/lib/dom-utils/instanceOf.js"),r=o("./node_modules/@popperjs/core/lib/dom-utils/getHTMLElementScroll.js");function l(e){return e!==(0,i.default)(e)&&(0,n.isHTMLElement)(e)?(0,r.default)(e):(0,s.default)(e)}},"./node_modules/@popperjs/core/lib/dom-utils/getOffsetParent.js":(e,t,o)=>{o.r(t),o.d(t,{default:()=>u});var s=o("./node_modules/@popperjs/core/lib/dom-utils/getWindow.js"),i=o("./node_modules/@popperjs/core/lib/dom-utils/getNodeName.js"),n=o("./node_modules/@popperjs/core/lib/dom-utils/getComputedStyle.js"),r=o("./node_modules/@popperjs/core/lib/dom-utils/instanceOf.js"),l=o("./node_modules/@popperjs/core/lib/dom-utils/isTableElement.js"),a=o("./node_modules/@popperjs/core/lib/dom-utils/getParentNode.js"),d=o("./node_modules/@popperjs/core/lib/utils/userAgent.js");function c(e){return(0,r.isHTMLElement)(e)&&"fixed"!==(0,n.default)(e).position?e.offsetParent:null}function u(e){for(var t=(0,s.default)(e),o=c(e);o&&(0,l.default)(o)&&"static"===(0,n.default)(o).position;)o=c(o);return o&&("html"===(0,i.default)(o)||"body"===(0,i.default)(o)&&"static"===(0,n.default)(o).position)?t:o||function(e){var t=/firefox/i.test((0,d.default)());if(/Trident/i.test((0,d.default)())&&(0,r.isHTMLElement)(e)&&"fixed"===(0,n.default)(e).position)return null;var o=(0,a.default)(e);for((0,r.isShadowRoot)(o)&&(o=o.host);(0,r.isHTMLElement)(o)&&["html","body"].indexOf((0,i.default)(o))<0;){var s=(0,n.default)(o);if("none"!==s.transform||"none"!==s.perspective||"paint"===s.contain||-1!==["transform","perspective"].indexOf(s.willChange)||t&&"filter"===s.willChange||t&&s.filter&&"none"!==s.filter)return o;o=o.parentNode}return null}(e)||t}},"./node_modules/@popperjs/core/lib/dom-utils/getParentNode.js":(e,t,o)=>{o.r(t),o.d(t,{default:()=>r});var s=o("./node_modules/@popperjs/core/lib/dom-utils/getNodeName.js"),i=o("./node_modules/@popperjs/core/lib/dom-utils/getDocumentElement.js"),n=o("./node_modules/@popperjs/core/lib/dom-utils/instanceOf.js");function r(e){return"html"===(0,s.default)(e)?e:e.assignedSlot||e.parentNode||((0,n.isShadowRoot)(e)?e.host:null)||(0,i.default)(e)}},"./node_modules/@popperjs/core/lib/dom-utils/getScrollParent.js":(e,t,o)=>{o.r(t),o.d(t,{default:()=>l});var s=o("./node_modules/@popperjs/core/lib/dom-utils/getParentNode.js"),i=o("./node_modules/@popperjs/core/lib/dom-utils/isScrollParent.js"),n=o("./node_modules/@popperjs/core/lib/dom-utils/getNodeName.js"),r=o("./node_modules/@popperjs/core/lib/dom-utils/instanceOf.js");function l(e){return["html","body","#document"].indexOf((0,n.default)(e))>=0?e.ownerDocument.body:(0,r.isHTMLElement)(e)&&(0,i.default)(e)?e:l((0,s.default)(e))}},"./node_modules/@popperjs/core/lib/dom-utils/getViewportRect.js":(e,t,o)=>{o.r(t),o.d(t,{default:()=>l});var s=o("./node_modules/@popperjs/core/lib/dom-utils/getWindow.js"),i=o("./node_modules/@popperjs/core/lib/dom-utils/getDocumentElement.js"),n=o("./node_modules/@popperjs/core/lib/dom-utils/getWindowScrollBarX.js"),r=o("./node_modules/@popperjs/core/lib/dom-utils/isLayoutViewport.js");function l(e,t){var o=(0,s.default)(e),l=(0,i.default)(e),a=o.visualViewport,d=l.clientWidth,c=l.clientHeight,u=0,p=0;if(a){d=a.width,c=a.height;var f=(0,r.default)();(f||!f&&"fixed"===t)&&(u=a.offsetLeft,p=a.offsetTop)}return{width:d,height:c,x:u+(0,n.default)(e),y:p}}},"./node_modules/@popperjs/core/lib/dom-utils/getWindow.js":(e,t,o)=>{function s(e){if(null==e)return window;if("[object Window]"!==e.toString()){var t=e.ownerDocument;return t&&t.defaultView||window}return e}o.r(t),o.d(t,{default:()=>s})},"./node_modules/@popperjs/core/lib/dom-utils/getWindowScroll.js":(e,t,o)=>{o.r(t),o.d(t,{default:()=>i});var s=o("./node_modules/@popperjs/core/lib/dom-utils/getWindow.js");function i(e){var t=(0,s.default)(e);return{scrollLeft:t.pageXOffset,scrollTop:t.pageYOffset}}},"./node_modules/@popperjs/core/lib/dom-utils/getWindowScrollBarX.js":(e,t,o)=>{o.r(t),o.d(t,{default:()=>r});var s=o("./node_modules/@popperjs/core/lib/dom-utils/getBoundingClientRect.js"),i=o("./node_modules/@popperjs/core/lib/dom-utils/getDocumentElement.js"),n=o("./node_modules/@popperjs/core/lib/dom-utils/getWindowScroll.js");function r(e){return(0,s.default)((0,i.default)(e)).left+(0,n.default)(e).scrollLeft}},"./node_modules/@popperjs/core/lib/dom-utils/instanceOf.js":(e,t,o)=>{o.r(t),o.d(t,{isElement:()=>i,isHTMLElement:()=>n,isShadowRoot:()=>r});var s=o("./node_modules/@popperjs/core/lib/dom-utils/getWindow.js");function i(e){return e instanceof(0,s.default)(e).Element||e instanceof Element}function n(e){return e instanceof(0,s.default)(e).HTMLElement||e instanceof HTMLElement}function r(e){return"undefined"!=typeof ShadowRoot&&(e instanceof(0,s.default)(e).ShadowRoot||e instanceof ShadowRoot)}},"./node_modules/@popperjs/core/lib/dom-utils/isLayoutViewport.js":(e,t,o)=>{o.r(t),o.d(t,{default:()=>i});var s=o("./node_modules/@popperjs/core/lib/utils/userAgent.js");function i(){return!/^((?!chrome|android).)*safari/i.test((0,s.default)())}},"./node_modules/@popperjs/core/lib/dom-utils/isScrollParent.js":(e,t,o)=>{o.r(t),o.d(t,{default:()=>i});var s=o("./node_modules/@popperjs/core/lib/dom-utils/getComputedStyle.js");function i(e){var t=(0,s.default)(e),o=t.overflow,i=t.overflowX,n=t.overflowY;return/auto|scroll|overlay|hidden/.test(o+n+i)}},"./node_modules/@popperjs/core/lib/dom-utils/isTableElement.js":(e,t,o)=>{o.r(t),o.d(t,{default:()=>i});var s=o("./node_modules/@popperjs/core/lib/dom-utils/getNodeName.js");function i(e){return["table","td","th"].indexOf((0,s.default)(e))>=0}},"./node_modules/@popperjs/core/lib/dom-utils/listScrollParents.js":(e,t,o)=>{o.r(t),o.d(t,{default:()=>l});var s=o("./node_modules/@popperjs/core/lib/dom-utils/getScrollParent.js"),i=o("./node_modules/@popperjs/core/lib/dom-utils/getParentNode.js"),n=o("./node_modules/@popperjs/core/lib/dom-utils/getWindow.js"),r=o("./node_modules/@popperjs/core/lib/dom-utils/isScrollParent.js");function l(e,t){var o;void 0===t&&(t=[]);var a=(0,s.default)(e),d=a===(null==(o=e.ownerDocument)?void 0:o.body),c=(0,n.default)(a),u=d?[c].concat(c.visualViewport||[],(0,r.default)(a)?a:[]):a,p=t.concat(u);return d?p:p.concat(l((0,i.default)(u)))}},"./node_modules/@popperjs/core/lib/enums.js":(e,t,o)=>{o.r(t),o.d(t,{afterMain:()=>w,afterRead:()=>v,afterWrite:()=>O,auto:()=>l,basePlacements:()=>a,beforeMain:()=>j,beforeRead:()=>_,beforeWrite:()=>E,bottom:()=>i,clippingParents:()=>u,end:()=>c,left:()=>r,main:()=>y,modifierPhases:()=>C,placements:()=>g,popper:()=>f,read:()=>b,reference:()=>m,right:()=>n,start:()=>d,top:()=>s,variationPlacements:()=>h,viewport:()=>p,write:()=>A});var s="top",i="bottom",n="right",r="left",l="auto",a=[s,i,n,r],d="start",c="end",u="clippingParents",p="viewport",f="popper",m="reference",h=a.reduce((function(e,t){return e.concat([t+"-"+d,t+"-"+c])}),[]),g=[].concat(a,[l]).reduce((function(e,t){return e.concat([t,t+"-"+d,t+"-"+c])}),[]),_="beforeRead",b="read",v="afterRead",j="beforeMain",y="main",w="afterMain",E="beforeWrite",A="write",O="afterWrite",C=[_,b,v,j,y,w,E,A,O]},"./node_modules/@popperjs/core/lib/index.js":(e,t,o)=>{o.r(t),o.d(t,{afterMain:()=>s.afterMain,afterRead:()=>s.afterRead,afterWrite:()=>s.afterWrite,applyStyles:()=>i.applyStyles,arrow:()=>i.arrow,auto:()=>s.auto,basePlacements:()=>s.basePlacements,beforeMain:()=>s.beforeMain,beforeRead:()=>s.beforeRead,beforeWrite:()=>s.beforeWrite,bottom:()=>s.bottom,clippingParents:()=>s.clippingParents,computeStyles:()=>i.computeStyles,createPopper:()=>l.createPopper,createPopperBase:()=>n.createPopper,createPopperLite:()=>a.createPopper,detectOverflow:()=>r.default,end:()=>s.end,eventListeners:()=>i.eventListeners,flip:()=>i.flip,hide:()=>i.hide,left:()=>s.left,main:()=>s.main,modifierPhases:()=>s.modifierPhases,offset:()=>i.offset,placements:()=>s.placements,popper:()=>s.popper,popperGenerator:()=>n.popperGenerator,popperOffsets:()=>i.popperOffsets,preventOverflow:()=>i.preventOverflow,read:()=>s.read,reference:()=>s.reference,right:()=>s.right,start:()=>s.start,top:()=>s.top,variationPlacements:()=>s.variationPlacements,viewport:()=>s.viewport,write:()=>s.write});var s=o("./node_modules/@popperjs/core/lib/enums.js"),i=o("./node_modules/@popperjs/core/lib/modifiers/index.js"),n=o("./node_modules/@popperjs/core/lib/createPopper.js"),r=o("./node_modules/@popperjs/core/lib/utils/detectOverflow.js"),l=o("./node_modules/@popperjs/core/lib/popper.js"),a=o("./node_modules/@popperjs/core/lib/popper-lite.js")},"./node_modules/@popperjs/core/lib/modifiers/applyStyles.js":(e,t,o)=>{o.r(t),o.d(t,{default:()=>n});var s=o("./node_modules/@popperjs/core/lib/dom-utils/getNodeName.js"),i=o("./node_modules/@popperjs/core/lib/dom-utils/instanceOf.js");const n={name:"applyStyles",enabled:!0,phase:"write",fn:function(e){var t=e.state;Object.keys(t.elements).forEach((function(e){var o=t.styles[e]||{},n=t.attributes[e]||{},r=t.elements[e];(0,i.isHTMLElement)(r)&&(0,s.default)(r)&&(Object.assign(r.style,o),Object.keys(n).forEach((function(e){var t=n[e];!1===t?r.removeAttribute(e):r.setAttribute(e,!0===t?"":t)})))}))},effect:function(e){var t=e.state,o={popper:{position:t.options.strategy,left:"0",top:"0",margin:"0"},arrow:{position:"absolute"},reference:{}};return Object.assign(t.elements.popper.style,o.popper),t.styles=o,t.elements.arrow&&Object.assign(t.elements.arrow.style,o.arrow),function(){Object.keys(t.elements).forEach((function(e){var n=t.elements[e],r=t.attributes[e]||{},l=Object.keys(t.styles.hasOwnProperty(e)?t.styles[e]:o[e]).reduce((function(e,t){return e[t]="",e}),{});(0,i.isHTMLElement)(n)&&(0,s.default)(n)&&(Object.assign(n.style,l),Object.keys(r).forEach((function(e){n.removeAttribute(e)})))}))}},requires:["computeStyles"]}},"./node_modules/@popperjs/core/lib/modifiers/arrow.js":(e,t,o)=>{o.r(t),o.d(t,{default:()=>m});var s=o("./node_modules/@popperjs/core/lib/utils/getBasePlacement.js"),i=o("./node_modules/@popperjs/core/lib/dom-utils/getLayoutRect.js"),n=o("./node_modules/@popperjs/core/lib/dom-utils/contains.js"),r=o("./node_modules/@popperjs/core/lib/dom-utils/getOffsetParent.js"),l=o("./node_modules/@popperjs/core/lib/utils/getMainAxisFromPlacement.js"),a=o("./node_modules/@popperjs/core/lib/utils/within.js"),d=o("./node_modules/@popperjs/core/lib/utils/mergePaddingObject.js"),c=o("./node_modules/@popperjs/core/lib/utils/expandToHashMap.js"),u=o("./node_modules/@popperjs/core/lib/enums.js"),p=o("./node_modules/@popperjs/core/lib/dom-utils/instanceOf.js"),f=function(e,t){return e="function"==typeof e?e(Object.assign({},t.rects,{placement:t.placement})):e,(0,d.default)("number"!=typeof e?e:(0,c.default)(e,u.basePlacements))};const m={name:"arrow",enabled:!0,phase:"main",fn:function(e){var t,o=e.state,n=e.name,d=e.options,c=o.elements.arrow,p=o.modifiersData.popperOffsets,m=(0,s.default)(o.placement),h=(0,l.default)(m),g=[u.left,u.right].indexOf(m)>=0?"height":"width";if(c&&p){var _=f(d.padding,o),b=(0,i.default)(c),v="y"===h?u.top:u.left,j="y"===h?u.bottom:u.right,y=o.rects.reference[g]+o.rects.reference[h]-p[h]-o.rects.popper[g],w=p[h]-o.rects.reference[h],E=(0,r.default)(c),A=E?"y"===h?E.clientHeight||0:E.clientWidth||0:0,O=y/2-w/2,C=_[v],T=A-b[g]-_[j],x=A/2-b[g]/2+O,S=(0,a.within)(C,x,T),P=h;o.modifiersData[n]=((t={})[P]=S,t.centerOffset=S-x,t)}},effect:function(e){var t=e.state,o=e.options.element,s=void 0===o?"[data-popper-arrow]":o;null!=s&&("string"!=typeof s||(s=t.elements.popper.querySelector(s)))&&((0,p.isHTMLElement)(s)||console.error(['Popper: "arrow" element must be an HTMLElement (not an SVGElement).',"To use an SVG arrow, wrap it in an HTMLElement that will be used as","the arrow."].join(" ")),(0,n.default)(t.elements.popper,s)?t.elements.arrow=s:console.error(['Popper: "arrow" modifier\'s `element` must be a child of the popper',"element."].join(" ")))},requires:["popperOffsets"],requiresIfExists:["preventOverflow"]}},"./node_modules/@popperjs/core/lib/modifiers/computeStyles.js":(e,t,o)=>{o.r(t),o.d(t,{default:()=>f,mapToStyles:()=>p});var s=o("./node_modules/@popperjs/core/lib/enums.js"),i=o("./node_modules/@popperjs/core/lib/dom-utils/getOffsetParent.js"),n=o("./node_modules/@popperjs/core/lib/dom-utils/getWindow.js"),r=o("./node_modules/@popperjs/core/lib/dom-utils/getDocumentElement.js"),l=o("./node_modules/@popperjs/core/lib/dom-utils/getComputedStyle.js"),a=o("./node_modules/@popperjs/core/lib/utils/getBasePlacement.js"),d=o("./node_modules/@popperjs/core/lib/utils/getVariation.js"),c=o("./node_modules/@popperjs/core/lib/utils/math.js"),u={top:"auto",right:"auto",bottom:"auto",left:"auto"};function p(e){var t,o=e.popper,a=e.popperRect,d=e.placement,p=e.variation,f=e.offsets,m=e.position,h=e.gpuAcceleration,g=e.adaptive,_=e.roundOffsets,b=e.isFixed,v=f.x,j=void 0===v?0:v,y=f.y,w=void 0===y?0:y,E="function"==typeof _?_({x:j,y:w}):{x:j,y:w};j=E.x,w=E.y;var A=f.hasOwnProperty("x"),O=f.hasOwnProperty("y"),C=s.left,T=s.top,x=window;if(g){var S=(0,i.default)(o),P="clientHeight",k="clientWidth";if(S===(0,n.default)(o)&&(S=(0,r.default)(o),"static"!==(0,l.default)(S).position&&"absolute"===m&&(P="scrollHeight",k="scrollWidth")),d===s.top||(d===s.left||d===s.right)&&p===s.end)T=s.bottom,w-=(b&&S===x&&x.visualViewport?x.visualViewport.height:S[P])-a.height,w*=h?1:-1;if(d===s.left||(d===s.top||d===s.bottom)&&p===s.end)C=s.right,j-=(b&&S===x&&x.visualViewport?x.visualViewport.width:S[k])-a.width,j*=h?1:-1}var L,D=Object.assign({position:m},g&&u),N=!0===_?function(e){var t=e.x,o=e.y,s=window.devicePixelRatio||1;return{x:(0,c.round)(t*s)/s||0,y:(0,c.round)(o*s)/s||0}}({x:j,y:w}):{x:j,y:w};return j=N.x,w=N.y,h?Object.assign({},D,((L={})[T]=O?"0":"",L[C]=A?"0":"",L.transform=(x.devicePixelRatio||1)<=1?"translate("+j+"px, "+w+"px)":"translate3d("+j+"px, "+w+"px, 0)",L)):Object.assign({},D,((t={})[T]=O?w+"px":"",t[C]=A?j+"px":"",t.transform="",t))}const f={name:"computeStyles",enabled:!0,phase:"beforeWrite",fn:function(e){var t=e.state,o=e.options,s=o.gpuAcceleration,i=void 0===s||s,n=o.adaptive,r=void 0===n||n,c=o.roundOffsets,u=void 0===c||c,f=(0,l.default)(t.elements.popper).transitionProperty||"";r&&["transform","top","right","bottom","left"].some((function(e){return f.indexOf(e)>=0}))&&console.warn(["Popper: Detected CSS transitions on at least one of the following",'CSS properties: "transform", "top", "right", "bottom", "left".',"\n\n",'Disable the "computeStyles" modifier\'s `adaptive` option to allow',"for smooth transitions, or remove these properties from the CSS","transition declaration on the popper element if only transitioning","opacity or background-color for example.","\n\n","We recommend using the popper element as a wrapper around an inner","element that can have any CSS property transitioned for animations."].join(" "));var m={placement:(0,a.default)(t.placement),variation:(0,d.default)(t.placement),popper:t.elements.popper,popperRect:t.rects.popper,gpuAcceleration:i,isFixed:"fixed"===t.options.strategy};null!=t.modifiersData.popperOffsets&&(t.styles.popper=Object.assign({},t.styles.popper,p(Object.assign({},m,{offsets:t.modifiersData.popperOffsets,position:t.options.strategy,adaptive:r,roundOffsets:u})))),null!=t.modifiersData.arrow&&(t.styles.arrow=Object.assign({},t.styles.arrow,p(Object.assign({},m,{offsets:t.modifiersData.arrow,position:"absolute",adaptive:!1,roundOffsets:u})))),t.attributes.popper=Object.assign({},t.attributes.popper,{"data-popper-placement":t.placement})},data:{}}},"./node_modules/@popperjs/core/lib/modifiers/eventListeners.js":(e,t,o)=>{o.r(t),o.d(t,{default:()=>n});var s=o("./node_modules/@popperjs/core/lib/dom-utils/getWindow.js"),i={passive:!0};const n={name:"eventListeners",enabled:!0,phase:"write",fn:function(){},effect:function(e){var t=e.state,o=e.instance,n=e.options,r=n.scroll,l=void 0===r||r,a=n.resize,d=void 0===a||a,c=(0,s.default)(t.elements.popper),u=[].concat(t.scrollParents.reference,t.scrollParents.popper);return l&&u.forEach((function(e){e.addEventListener("scroll",o.update,i)})),d&&c.addEventListener("resize",o.update,i),function(){l&&u.forEach((function(e){e.removeEventListener("scroll",o.update,i)})),d&&c.removeEventListener("resize",o.update,i)}},data:{}}},"./node_modules/@popperjs/core/lib/modifiers/flip.js":(e,t,o)=>{o.r(t),o.d(t,{default:()=>c});var s=o("./node_modules/@popperjs/core/lib/utils/getOppositePlacement.js"),i=o("./node_modules/@popperjs/core/lib/utils/getBasePlacement.js"),n=o("./node_modules/@popperjs/core/lib/utils/getOppositeVariationPlacement.js"),r=o("./node_modules/@popperjs/core/lib/utils/detectOverflow.js"),l=o("./node_modules/@popperjs/core/lib/utils/computeAutoPlacement.js"),a=o("./node_modules/@popperjs/core/lib/enums.js"),d=o("./node_modules/@popperjs/core/lib/utils/getVariation.js");const c={name:"flip",enabled:!0,phase:"main",fn:function(e){var t=e.state,o=e.options,c=e.name;if(!t.modifiersData[c]._skip){for(var u=o.mainAxis,p=void 0===u||u,f=o.altAxis,m=void 0===f||f,h=o.fallbackPlacements,g=o.padding,_=o.boundary,b=o.rootBoundary,v=o.altBoundary,j=o.flipVariations,y=void 0===j||j,w=o.allowedAutoPlacements,E=t.options.placement,A=(0,i.default)(E),O=h||(A===E||!y?[(0,s.default)(E)]:function(e){if((0,i.default)(e)===a.auto)return[];var t=(0,s.default)(e);return[(0,n.default)(e),t,(0,n.default)(t)]}(E)),C=[E].concat(O).reduce((function(e,o){return e.concat((0,i.default)(o)===a.auto?(0,l.default)(t,{placement:o,boundary:_,rootBoundary:b,padding:g,flipVariations:y,allowedAutoPlacements:w}):o)}),[]),T=t.rects.reference,x=t.rects.popper,S=new Map,P=!0,k=C[0],L=0;L<C.length;L++){var D=C[L],N=(0,i.default)(D),M=(0,d.default)(D)===a.start,$=[a.top,a.bottom].indexOf(N)>=0,I=$?"width":"height",H=(0,r.default)(t,{placement:D,boundary:_,rootBoundary:b,altBoundary:v,padding:g}),F=$?M?a.right:a.left:M?a.bottom:a.top;T[I]>x[I]&&(F=(0,s.default)(F));var W=(0,s.default)(F),B=[];if(p&&B.push(H[N]<=0),m&&B.push(H[F]<=0,H[W]<=0),B.every((function(e){return e}))){k=D,P=!1;break}S.set(D,B)}if(P)for(var R=function(e){var t=C.find((function(t){var o=S.get(t);if(o)return o.slice(0,e).every((function(e){return e}))}));if(t)return k=t,"break"},q=y?3:1;q>0;q--){if("break"===R(q))break}t.placement!==k&&(t.modifiersData[c]._skip=!0,t.placement=k,t.reset=!0)}},requiresIfExists:["offset"],data:{_skip:!1}}},"./node_modules/@popperjs/core/lib/modifiers/hide.js":(e,t,o)=>{o.r(t),o.d(t,{default:()=>l});var s=o("./node_modules/@popperjs/core/lib/enums.js"),i=o("./node_modules/@popperjs/core/lib/utils/detectOverflow.js");function n(e,t,o){return void 0===o&&(o={x:0,y:0}),{top:e.top-t.height-o.y,right:e.right-t.width+o.x,bottom:e.bottom-t.height+o.y,left:e.left-t.width-o.x}}function r(e){return[s.top,s.right,s.bottom,s.left].some((function(t){return e[t]>=0}))}const l={name:"hide",enabled:!0,phase:"main",requiresIfExists:["preventOverflow"],fn:function(e){var t=e.state,o=e.name,s=t.rects.reference,l=t.rects.popper,a=t.modifiersData.preventOverflow,d=(0,i.default)(t,{elementContext:"reference"}),c=(0,i.default)(t,{altBoundary:!0}),u=n(d,s),p=n(c,l,a),f=r(u),m=r(p);t.modifiersData[o]={referenceClippingOffsets:u,popperEscapeOffsets:p,isReferenceHidden:f,hasPopperEscaped:m},t.attributes.popper=Object.assign({},t.attributes.popper,{"data-popper-reference-hidden":f,"data-popper-escaped":m})}}},"./node_modules/@popperjs/core/lib/modifiers/index.js":(e,t,o)=>{o.r(t),o.d(t,{applyStyles:()=>s.default,arrow:()=>i.default,computeStyles:()=>n.default,eventListeners:()=>r.default,flip:()=>l.default,hide:()=>a.default,offset:()=>d.default,popperOffsets:()=>c.default,preventOverflow:()=>u.default});var s=o("./node_modules/@popperjs/core/lib/modifiers/applyStyles.js"),i=o("./node_modules/@popperjs/core/lib/modifiers/arrow.js"),n=o("./node_modules/@popperjs/core/lib/modifiers/computeStyles.js"),r=o("./node_modules/@popperjs/core/lib/modifiers/eventListeners.js"),l=o("./node_modules/@popperjs/core/lib/modifiers/flip.js"),a=o("./node_modules/@popperjs/core/lib/modifiers/hide.js"),d=o("./node_modules/@popperjs/core/lib/modifiers/offset.js"),c=o("./node_modules/@popperjs/core/lib/modifiers/popperOffsets.js"),u=o("./node_modules/@popperjs/core/lib/modifiers/preventOverflow.js")},"./node_modules/@popperjs/core/lib/modifiers/offset.js":(e,t,o)=>{o.r(t),o.d(t,{default:()=>r,distanceAndSkiddingToXY:()=>n});var s=o("./node_modules/@popperjs/core/lib/utils/getBasePlacement.js"),i=o("./node_modules/@popperjs/core/lib/enums.js");function n(e,t,o){var n=(0,s.default)(e),r=[i.left,i.top].indexOf(n)>=0?-1:1,l="function"==typeof o?o(Object.assign({},t,{placement:e})):o,a=l[0],d=l[1];return a=a||0,d=(d||0)*r,[i.left,i.right].indexOf(n)>=0?{x:d,y:a}:{x:a,y:d}}const r={name:"offset",enabled:!0,phase:"main",requires:["popperOffsets"],fn:function(e){var t=e.state,o=e.options,s=e.name,r=o.offset,l=void 0===r?[0,0]:r,a=i.placements.reduce((function(e,o){return e[o]=n(o,t.rects,l),e}),{}),d=a[t.placement],c=d.x,u=d.y;null!=t.modifiersData.popperOffsets&&(t.modifiersData.popperOffsets.x+=c,t.modifiersData.popperOffsets.y+=u),t.modifiersData[s]=a}}},"./node_modules/@popperjs/core/lib/modifiers/popperOffsets.js":(e,t,o)=>{o.r(t),o.d(t,{default:()=>i});var s=o("./node_modules/@popperjs/core/lib/utils/computeOffsets.js");const i={name:"popperOffsets",enabled:!0,phase:"read",fn:function(e){var t=e.state,o=e.name;t.modifiersData[o]=(0,s.default)({reference:t.rects.reference,element:t.rects.popper,strategy:"absolute",placement:t.placement})},data:{}}},"./node_modules/@popperjs/core/lib/modifiers/preventOverflow.js":(e,t,o)=>{o.r(t),o.d(t,{default:()=>m});var s=o("./node_modules/@popperjs/core/lib/enums.js"),i=o("./node_modules/@popperjs/core/lib/utils/getBasePlacement.js"),n=o("./node_modules/@popperjs/core/lib/utils/getMainAxisFromPlacement.js"),r=o("./node_modules/@popperjs/core/lib/utils/getAltAxis.js"),l=o("./node_modules/@popperjs/core/lib/utils/within.js"),a=o("./node_modules/@popperjs/core/lib/dom-utils/getLayoutRect.js"),d=o("./node_modules/@popperjs/core/lib/dom-utils/getOffsetParent.js"),c=o("./node_modules/@popperjs/core/lib/utils/detectOverflow.js"),u=o("./node_modules/@popperjs/core/lib/utils/getVariation.js"),p=o("./node_modules/@popperjs/core/lib/utils/getFreshSideObject.js"),f=o("./node_modules/@popperjs/core/lib/utils/math.js");const m={name:"preventOverflow",enabled:!0,phase:"main",fn:function(e){var t=e.state,o=e.options,m=e.name,h=o.mainAxis,g=void 0===h||h,_=o.altAxis,b=void 0!==_&&_,v=o.boundary,j=o.rootBoundary,y=o.altBoundary,w=o.padding,E=o.tether,A=void 0===E||E,O=o.tetherOffset,C=void 0===O?0:O,T=(0,c.default)(t,{boundary:v,rootBoundary:j,padding:w,altBoundary:y}),x=(0,i.default)(t.placement),S=(0,u.default)(t.placement),P=!S,k=(0,n.default)(x),L=(0,r.default)(k),D=t.modifiersData.popperOffsets,N=t.rects.reference,M=t.rects.popper,$="function"==typeof C?C(Object.assign({},t.rects,{placement:t.placement})):C,I="number"==typeof $?{mainAxis:$,altAxis:$}:Object.assign({mainAxis:0,altAxis:0},$),H=t.modifiersData.offset?t.modifiersData.offset[t.placement]:null,F={x:0,y:0};if(D){if(g){var W,B="y"===k?s.top:s.left,R="y"===k?s.bottom:s.right,q="y"===k?"height":"width",V=D[k],z=V+T[B],X=V-T[R],K=A?-M[q]/2:0,Y=S===s.start?N[q]:M[q],Q=S===s.start?-M[q]:-N[q],U=t.elements.arrow,G=A&&U?(0,a.default)(U):{width:0,height:0},J=t.modifiersData["arrow#persistent"]?t.modifiersData["arrow#persistent"].padding:(0,p.default)(),Z=J[B],ee=J[R],te=(0,l.within)(0,N[q],G[q]),oe=P?N[q]/2-K-te-Z-I.mainAxis:Y-te-Z-I.mainAxis,se=P?-N[q]/2+K+te+ee+I.mainAxis:Q+te+ee+I.mainAxis,ie=t.elements.arrow&&(0,d.default)(t.elements.arrow),ne=ie?"y"===k?ie.clientTop||0:ie.clientLeft||0:0,re=null!=(W=null==H?void 0:H[k])?W:0,le=V+oe-re-ne,ae=V+se-re,de=(0,l.within)(A?(0,f.min)(z,le):z,V,A?(0,f.max)(X,ae):X);D[k]=de,F[k]=de-V}if(b){var ce,ue="x"===k?s.top:s.left,pe="x"===k?s.bottom:s.right,fe=D[L],me="y"===L?"height":"width",he=fe+T[ue],ge=fe-T[pe],_e=-1!==[s.top,s.left].indexOf(x),be=null!=(ce=null==H?void 0:H[L])?ce:0,ve=_e?he:fe-N[me]-M[me]-be+I.altAxis,je=_e?fe+N[me]+M[me]-be-I.altAxis:ge,ye=A&&_e?(0,l.withinMaxClamp)(ve,fe,je):(0,l.within)(A?ve:he,fe,A?je:ge);D[L]=ye,F[L]=ye-fe}t.modifiersData[m]=F}},requiresIfExists:["offset"]}},"./node_modules/@popperjs/core/lib/popper-lite.js":(e,t,o)=>{o.r(t),o.d(t,{createPopper:()=>c,defaultModifiers:()=>d,detectOverflow:()=>i.default,popperGenerator:()=>s.popperGenerator});var s=o("./node_modules/@popperjs/core/lib/createPopper.js"),i=o("./node_modules/@popperjs/core/lib/utils/detectOverflow.js"),n=o("./node_modules/@popperjs/core/lib/modifiers/eventListeners.js"),r=o("./node_modules/@popperjs/core/lib/modifiers/popperOffsets.js"),l=o("./node_modules/@popperjs/core/lib/modifiers/computeStyles.js"),a=o("./node_modules/@popperjs/core/lib/modifiers/applyStyles.js"),d=[n.default,r.default,l.default,a.default],c=(0,s.popperGenerator)({defaultModifiers:d})},"./node_modules/@popperjs/core/lib/popper.js":(e,t,o)=>{o.r(t),o.d(t,{applyStyles:()=>h.applyStyles,arrow:()=>h.arrow,computeStyles:()=>h.computeStyles,createPopper:()=>_,createPopperLite:()=>m.createPopper,defaultModifiers:()=>g,detectOverflow:()=>i.default,eventListeners:()=>h.eventListeners,flip:()=>h.flip,hide:()=>h.hide,offset:()=>h.offset,popperGenerator:()=>s.popperGenerator,popperOffsets:()=>h.popperOffsets,preventOverflow:()=>h.preventOverflow});var s=o("./node_modules/@popperjs/core/lib/createPopper.js"),i=o("./node_modules/@popperjs/core/lib/utils/detectOverflow.js"),n=o("./node_modules/@popperjs/core/lib/modifiers/eventListeners.js"),r=o("./node_modules/@popperjs/core/lib/modifiers/popperOffsets.js"),l=o("./node_modules/@popperjs/core/lib/modifiers/computeStyles.js"),a=o("./node_modules/@popperjs/core/lib/modifiers/applyStyles.js"),d=o("./node_modules/@popperjs/core/lib/modifiers/offset.js"),c=o("./node_modules/@popperjs/core/lib/modifiers/flip.js"),u=o("./node_modules/@popperjs/core/lib/modifiers/preventOverflow.js"),p=o("./node_modules/@popperjs/core/lib/modifiers/arrow.js"),f=o("./node_modules/@popperjs/core/lib/modifiers/hide.js"),m=o("./node_modules/@popperjs/core/lib/popper-lite.js"),h=o("./node_modules/@popperjs/core/lib/modifiers/index.js"),g=[n.default,r.default,l.default,a.default,d.default,c.default,u.default,p.default,f.default],_=(0,s.popperGenerator)({defaultModifiers:g})},"./node_modules/@popperjs/core/lib/utils/computeAutoPlacement.js":(e,t,o)=>{o.r(t),o.d(t,{default:()=>l});var s=o("./node_modules/@popperjs/core/lib/utils/getVariation.js"),i=o("./node_modules/@popperjs/core/lib/enums.js"),n=o("./node_modules/@popperjs/core/lib/utils/detectOverflow.js"),r=o("./node_modules/@popperjs/core/lib/utils/getBasePlacement.js");function l(e,t){void 0===t&&(t={});var o=t,l=o.placement,a=o.boundary,d=o.rootBoundary,c=o.padding,u=o.flipVariations,p=o.allowedAutoPlacements,f=void 0===p?i.placements:p,m=(0,s.default)(l),h=m?u?i.variationPlacements:i.variationPlacements.filter((function(e){return(0,s.default)(e)===m})):i.basePlacements,g=h.filter((function(e){return f.indexOf(e)>=0}));0===g.length&&(g=h,console.error(["Popper: The `allowedAutoPlacements` option did not allow any","placements. Ensure the `placement` option matches the variation","of the allowed placements.",'For example, "auto" cannot be used to allow "bottom-start".','Use "auto-start" instead.'].join(" ")));var _=g.reduce((function(t,o){return t[o]=(0,n.default)(e,{placement:o,boundary:a,rootBoundary:d,padding:c})[(0,r.default)(o)],t}),{});return Object.keys(_).sort((function(e,t){return _[e]-_[t]}))}},"./node_modules/@popperjs/core/lib/utils/computeOffsets.js":(e,t,o)=>{o.r(t),o.d(t,{default:()=>l});var s=o("./node_modules/@popperjs/core/lib/utils/getBasePlacement.js"),i=o("./node_modules/@popperjs/core/lib/utils/getVariation.js"),n=o("./node_modules/@popperjs/core/lib/utils/getMainAxisFromPlacement.js"),r=o("./node_modules/@popperjs/core/lib/enums.js");function l(e){var t,o=e.reference,l=e.element,a=e.placement,d=a?(0,s.default)(a):null,c=a?(0,i.default)(a):null,u=o.x+o.width/2-l.width/2,p=o.y+o.height/2-l.height/2;switch(d){case r.top:t={x:u,y:o.y-l.height};break;case r.bottom:t={x:u,y:o.y+o.height};break;case r.right:t={x:o.x+o.width,y:p};break;case r.left:t={x:o.x-l.width,y:p};break;default:t={x:o.x,y:o.y}}var f=d?(0,n.default)(d):null;if(null!=f){var m="y"===f?"height":"width";switch(c){case r.start:t[f]=t[f]-(o[m]/2-l[m]/2);break;case r.end:t[f]=t[f]+(o[m]/2-l[m]/2)}}return t}},"./node_modules/@popperjs/core/lib/utils/debounce.js":(e,t,o)=>{function s(e){var t;return function(){return t||(t=new Promise((function(o){Promise.resolve().then((function(){t=void 0,o(e())}))}))),t}}o.r(t),o.d(t,{default:()=>s})},"./node_modules/@popperjs/core/lib/utils/detectOverflow.js":(e,t,o)=>{o.r(t),o.d(t,{default:()=>p});var s=o("./node_modules/@popperjs/core/lib/dom-utils/getClippingRect.js"),i=o("./node_modules/@popperjs/core/lib/dom-utils/getDocumentElement.js"),n=o("./node_modules/@popperjs/core/lib/dom-utils/getBoundingClientRect.js"),r=o("./node_modules/@popperjs/core/lib/utils/computeOffsets.js"),l=o("./node_modules/@popperjs/core/lib/utils/rectToClientRect.js"),a=o("./node_modules/@popperjs/core/lib/enums.js"),d=o("./node_modules/@popperjs/core/lib/dom-utils/instanceOf.js"),c=o("./node_modules/@popperjs/core/lib/utils/mergePaddingObject.js"),u=o("./node_modules/@popperjs/core/lib/utils/expandToHashMap.js");function p(e,t){void 0===t&&(t={});var o=t,p=o.placement,f=void 0===p?e.placement:p,m=o.strategy,h=void 0===m?e.strategy:m,g=o.boundary,_=void 0===g?a.clippingParents:g,b=o.rootBoundary,v=void 0===b?a.viewport:b,j=o.elementContext,y=void 0===j?a.popper:j,w=o.altBoundary,E=void 0!==w&&w,A=o.padding,O=void 0===A?0:A,C=(0,c.default)("number"!=typeof O?O:(0,u.default)(O,a.basePlacements)),T=y===a.popper?a.reference:a.popper,x=e.rects.popper,S=e.elements[E?T:y],P=(0,s.default)((0,d.isElement)(S)?S:S.contextElement||(0,i.default)(e.elements.popper),_,v,h),k=(0,n.default)(e.elements.reference),L=(0,r.default)({reference:k,element:x,strategy:"absolute",placement:f}),D=(0,l.default)(Object.assign({},x,L)),N=y===a.popper?D:k,M={top:P.top-N.top+C.top,bottom:N.bottom-P.bottom+C.bottom,left:P.left-N.left+C.left,right:N.right-P.right+C.right},$=e.modifiersData.offset;if(y===a.popper&&$){var I=$[f];Object.keys(M).forEach((function(e){var t=[a.right,a.bottom].indexOf(e)>=0?1:-1,o=[a.top,a.bottom].indexOf(e)>=0?"y":"x";M[e]+=I[o]*t}))}return M}},"./node_modules/@popperjs/core/lib/utils/expandToHashMap.js":(e,t,o)=>{function s(e,t){return t.reduce((function(t,o){return t[o]=e,t}),{})}o.r(t),o.d(t,{default:()=>s})},"./node_modules/@popperjs/core/lib/utils/format.js":(e,t,o)=>{function s(e){for(var t=arguments.length,o=new Array(t>1?t-1:0),s=1;s<t;s++)o[s-1]=arguments[s];return[].concat(o).reduce((function(e,t){return e.replace(/%s/,t)}),e)}o.r(t),o.d(t,{default:()=>s})},"./node_modules/@popperjs/core/lib/utils/getAltAxis.js":(e,t,o)=>{function s(e){return"x"===e?"y":"x"}o.r(t),o.d(t,{default:()=>s})},"./node_modules/@popperjs/core/lib/utils/getBasePlacement.js":(e,t,o)=>{function s(e){return e.split("-")[0]}o.r(t),o.d(t,{default:()=>s})},"./node_modules/@popperjs/core/lib/utils/getFreshSideObject.js":(e,t,o)=>{function s(){return{top:0,right:0,bottom:0,left:0}}o.r(t),o.d(t,{default:()=>s})},"./node_modules/@popperjs/core/lib/utils/getMainAxisFromPlacement.js":(e,t,o)=>{function s(e){return["top","bottom"].indexOf(e)>=0?"x":"y"}o.r(t),o.d(t,{default:()=>s})},"./node_modules/@popperjs/core/lib/utils/getOppositePlacement.js":(e,t,o)=>{o.r(t),o.d(t,{default:()=>i});var s={left:"right",right:"left",bottom:"top",top:"bottom"};function i(e){return e.replace(/left|right|bottom|top/g,(function(e){return s[e]}))}},"./node_modules/@popperjs/core/lib/utils/getOppositeVariationPlacement.js":(e,t,o)=>{o.r(t),o.d(t,{default:()=>i});var s={start:"end",end:"start"};function i(e){return e.replace(/start|end/g,(function(e){return s[e]}))}},"./node_modules/@popperjs/core/lib/utils/getVariation.js":(e,t,o)=>{function s(e){return e.split("-")[1]}o.r(t),o.d(t,{default:()=>s})},"./node_modules/@popperjs/core/lib/utils/math.js":(e,t,o)=>{o.r(t),o.d(t,{max:()=>s,min:()=>i,round:()=>n});var s=Math.max,i=Math.min,n=Math.round},"./node_modules/@popperjs/core/lib/utils/mergeByName.js":(e,t,o)=>{function s(e){var t=e.reduce((function(e,t){var o=e[t.name];return e[t.name]=o?Object.assign({},o,t,{options:Object.assign({},o.options,t.options),data:Object.assign({},o.data,t.data)}):t,e}),{});return Object.keys(t).map((function(e){return t[e]}))}o.r(t),o.d(t,{default:()=>s})},"./node_modules/@popperjs/core/lib/utils/mergePaddingObject.js":(e,t,o)=>{o.r(t),o.d(t,{default:()=>i});var s=o("./node_modules/@popperjs/core/lib/utils/getFreshSideObject.js");function i(e){return Object.assign({},(0,s.default)(),e)}},"./node_modules/@popperjs/core/lib/utils/orderModifiers.js":(e,t,o)=>{o.r(t),o.d(t,{default:()=>n});var s=o("./node_modules/@popperjs/core/lib/enums.js");function i(e){var t=new Map,o=new Set,s=[];function i(e){o.add(e.name),[].concat(e.requires||[],e.requiresIfExists||[]).forEach((function(e){if(!o.has(e)){var s=t.get(e);s&&i(s)}})),s.push(e)}return e.forEach((function(e){t.set(e.name,e)})),e.forEach((function(e){o.has(e.name)||i(e)})),s}function n(e){var t=i(e);return s.modifierPhases.reduce((function(e,o){return e.concat(t.filter((function(e){return e.phase===o})))}),[])}},"./node_modules/@popperjs/core/lib/utils/rectToClientRect.js":(e,t,o)=>{function s(e){return Object.assign({},e,{left:e.x,top:e.y,right:e.x+e.width,bottom:e.y+e.height})}o.r(t),o.d(t,{default:()=>s})},"./node_modules/@popperjs/core/lib/utils/uniqueBy.js":(e,t,o)=>{function s(e,t){var o=new Set;return e.filter((function(e){var s=t(e);if(!o.has(s))return o.add(s),!0}))}o.r(t),o.d(t,{default:()=>s})},"./node_modules/@popperjs/core/lib/utils/userAgent.js":(e,t,o)=>{function s(){var e=navigator.userAgentData;return null!=e&&e.brands?e.brands.map((function(e){return e.brand+"/"+e.version})).join(" "):navigator.userAgent}o.r(t),o.d(t,{default:()=>s})},"./node_modules/@popperjs/core/lib/utils/validateModifiers.js":(e,t,o)=>{o.r(t),o.d(t,{default:()=>a});var s=o("./node_modules/@popperjs/core/lib/utils/format.js"),i=o("./node_modules/@popperjs/core/lib/enums.js"),n='Popper: modifier "%s" provided an invalid %s property, expected %s but got %s',r='Popper: modifier "%s" requires "%s", but "%s" modifier is not available',l=["name","enabled","phase","fn","effect","requires","options"];function a(e){e.forEach((function(t){[].concat(Object.keys(t),l).filter((function(e,t,o){return o.indexOf(e)===t})).forEach((function(o){switch(o){case"name":"string"!=typeof t.name&&console.error((0,s.default)(n,String(t.name),'"name"','"string"','"'+String(t.name)+'"'));break;case"enabled":"boolean"!=typeof t.enabled&&console.error((0,s.default)(n,t.name,'"enabled"','"boolean"','"'+String(t.enabled)+'"'));break;case"phase":i.modifierPhases.indexOf(t.phase)<0&&console.error((0,s.default)(n,t.name,'"phase"',"either "+i.modifierPhases.join(", "),'"'+String(t.phase)+'"'));break;case"fn":"function"!=typeof t.fn&&console.error((0,s.default)(n,t.name,'"fn"','"function"','"'+String(t.fn)+'"'));break;case"effect":null!=t.effect&&"function"!=typeof t.effect&&console.error((0,s.default)(n,t.name,'"effect"','"function"','"'+String(t.fn)+'"'));break;case"requires":null==t.requires||Array.isArray(t.requires)||console.error((0,s.default)(n,t.name,'"requires"','"array"','"'+String(t.requires)+'"'));break;case"requiresIfExists":Array.isArray(t.requiresIfExists)||console.error((0,s.default)(n,t.name,'"requiresIfExists"','"array"','"'+String(t.requiresIfExists)+'"'));break;case"options":case"data":break;default:console.error('PopperJS: an invalid property has been provided to the "'+t.name+'" modifier, valid properties are '+l.map((function(e){return'"'+e+'"'})).join(", ")+'; but "'+o+'" was provided.')}t.requires&&t.requires.forEach((function(o){null==e.find((function(e){return e.name===o}))&&console.error((0,s.default)(r,String(t.name),o,o))}))}))}))}},"./node_modules/@popperjs/core/lib/utils/within.js":(e,t,o)=>{o.r(t),o.d(t,{within:()=>i,withinMaxClamp:()=>n});var s=o("./node_modules/@popperjs/core/lib/utils/math.js");function i(e,t,o){return(0,s.max)(e,(0,s.min)(t,o))}function n(e,t,o){var s=i(e,t,o);return s>o?o:s}},"./node_modules/bootstrap/dist/js/bootstrap.esm.js":(e,t,o)=>{o.r(t),o.d(t,{Alert:()=>J,Button:()=>ee,Carousel:()=>Le,Collapse:()=>Xe,Dropdown:()=>_t,Modal:()=>Jt,Offcanvas:()=>_o,Popover:()=>Wo,ScrollSpy:()=>Go,Tab:()=>_s,Toast:()=>Ls,Tooltip:()=>Io});var s=o("./node_modules/@popperjs/core/lib/index.js"),i=o("./node_modules/@popperjs/core/lib/popper.js");const n="transitionend",r=e=>(e&&window.CSS&&window.CSS.escape&&(e=e.replace(/#([^\s"#']+)/g,((e,t)=>`#${CSS.escape(t)}`))),e),l=e=>{e.dispatchEvent(new Event(n))},a=e=>!(!e||"object"!=typeof e)&&(void 0!==e.jquery&&(e=e[0]),void 0!==e.nodeType),d=e=>a(e)?e.jquery?e[0]:e:"string"==typeof e&&e.length>0?document.querySelector(r(e)):null,c=e=>{if(!a(e)||0===e.getClientRects().length)return!1;const t="visible"===getComputedStyle(e).getPropertyValue("visibility"),o=e.closest("details:not([open])");if(!o)return t;if(o!==e){const t=e.closest("summary");if(t&&t.parentNode!==o)return!1;if(null===t)return!1}return t},u=e=>!e||e.nodeType!==Node.ELEMENT_NODE||(!!e.classList.contains("disabled")||(void 0!==e.disabled?e.disabled:e.hasAttribute("disabled")&&"false"!==e.getAttribute("disabled"))),p=e=>{if(!document.documentElement.attachShadow)return null;if("function"==typeof e.getRootNode){const t=e.getRootNode();return t instanceof ShadowRoot?t:null}return e instanceof ShadowRoot?e:e.parentNode?p(e.parentNode):null},f=()=>{},m=e=>{e.offsetHeight},h=()=>window.jQuery&&!document.body.hasAttribute("data-bs-no-jquery")?window.jQuery:null,g=[],_=()=>"rtl"===document.documentElement.dir,b=e=>{var t;t=()=>{const t=h();if(t){const o=e.NAME,s=t.fn[o];t.fn[o]=e.jQueryInterface,t.fn[o].Constructor=e,t.fn[o].noConflict=()=>(t.fn[o]=s,e.jQueryInterface)}},"loading"===document.readyState?(g.length||document.addEventListener("DOMContentLoaded",(()=>{for(const e of g)e()})),g.push(t)):t()},v=(e,t=[],o=e)=>"function"==typeof e?e(...t):o,j=(e,t,o=!0)=>{if(!o)return void v(e);const s=(e=>{if(!e)return 0;let{transitionDuration:t,transitionDelay:o}=window.getComputedStyle(e);const s=Number.parseFloat(t),i=Number.parseFloat(o);return s||i?(t=t.split(",")[0],o=o.split(",")[0],1e3*(Number.parseFloat(t)+Number.parseFloat(o))):0})(t)+5;let i=!1;const r=({target:o})=>{o===t&&(i=!0,t.removeEventListener(n,r),v(e))};t.addEventListener(n,r),setTimeout((()=>{i||l(t)}),s)},y=(e,t,o,s)=>{const i=e.length;let n=e.indexOf(t);return-1===n?!o&&s?e[i-1]:e[0]:(n+=o?1:-1,s&&(n=(n+i)%i),e[Math.max(0,Math.min(n,i-1))])},w=/[^.]*(?=\..*)\.|.*/,E=/\..*/,A=/::\d+$/,O={};let C=1;const T={mouseenter:"mouseover",mouseleave:"mouseout"},x=new Set(["click","dblclick","mouseup","mousedown","contextmenu","mousewheel","DOMMouseScroll","mouseover","mouseout","mousemove","selectstart","selectend","keydown","keypress","keyup","orientationchange","touchstart","touchmove","touchend","touchcancel","pointerdown","pointermove","pointerup","pointerleave","pointercancel","gesturestart","gesturechange","gestureend","focus","blur","change","reset","select","submit","focusin","focusout","load","unload","beforeunload","resize","move","DOMContentLoaded","readystatechange","error","abort","scroll"]);function S(e,t){return t&&`${t}::${C++}`||e.uidEvent||C++}function P(e){const t=S(e);return e.uidEvent=t,O[t]=O[t]||{},O[t]}function k(e,t,o=null){return Object.values(e).find((e=>e.callable===t&&e.delegationSelector===o))}function L(e,t,o){const s="string"==typeof t,i=s?o:t||o;let n=$(e);return x.has(n)||(n=e),[s,i,n]}function D(e,t,o,s,i){if("string"!=typeof t||!e)return;let[n,r,l]=L(t,o,s);if(t in T){const e=e=>function(t){if(!t.relatedTarget||t.relatedTarget!==t.delegateTarget&&!t.delegateTarget.contains(t.relatedTarget))return e.call(this,t)};r=e(r)}const a=P(e),d=a[l]||(a[l]={}),c=k(d,r,n?o:null);if(c)return void(c.oneOff=c.oneOff&&i);const u=S(r,t.replace(w,"")),p=n?function(e,t,o){return function s(i){const n=e.querySelectorAll(t);for(let{target:r}=i;r&&r!==this;r=r.parentNode)for(const l of n)if(l===r)return H(i,{delegateTarget:r}),s.oneOff&&I.off(e,i.type,t,o),o.apply(r,[i])}}(e,o,r):function(e,t){return function o(s){return H(s,{delegateTarget:e}),o.oneOff&&I.off(e,s.type,t),t.apply(e,[s])}}(e,r);p.delegationSelector=n?o:null,p.callable=r,p.oneOff=i,p.uidEvent=u,d[u]=p,e.addEventListener(l,p,n)}function N(e,t,o,s,i){const n=k(t[o],s,i);n&&(e.removeEventListener(o,n,Boolean(i)),delete t[o][n.uidEvent])}function M(e,t,o,s){const i=t[o]||{};for(const[n,r]of Object.entries(i))n.includes(s)&&N(e,t,o,r.callable,r.delegationSelector)}function $(e){return e=e.replace(E,""),T[e]||e}const I={on(e,t,o,s){D(e,t,o,s,!1)},one(e,t,o,s){D(e,t,o,s,!0)},off(e,t,o,s){if("string"!=typeof t||!e)return;const[i,n,r]=L(t,o,s),l=r!==t,a=P(e),d=a[r]||{},c=t.startsWith(".");if(void 0===n){if(c)for(const o of Object.keys(a))M(e,a,o,t.slice(1));for(const[o,s]of Object.entries(d)){const i=o.replace(A,"");l&&!t.includes(i)||N(e,a,r,s.callable,s.delegationSelector)}}else{if(!Object.keys(d).length)return;N(e,a,r,n,i?o:null)}},trigger(e,t,o){if("string"!=typeof t||!e)return null;const s=h();let i=null,n=!0,r=!0,l=!1;t!==$(t)&&s&&(i=s.Event(t,o),s(e).trigger(i),n=!i.isPropagationStopped(),r=!i.isImmediatePropagationStopped(),l=i.isDefaultPrevented());let a=new Event(t,{bubbles:n,cancelable:!0});return a=H(a,o),l&&a.preventDefault(),r&&e.dispatchEvent(a),a.defaultPrevented&&i&&i.preventDefault(),a}};function H(e,t={}){for(const[o,s]of Object.entries(t))try{e[o]=s}catch(t){Object.defineProperty(e,o,{configurable:!0,get:()=>s})}return e}const F=new Map,W={set(e,t,o){F.has(e)||F.set(e,new Map);const s=F.get(e);s.has(t)||0===s.size?s.set(t,o):console.error(`Bootstrap doesn't allow more than one instance per element. Bound instance: ${Array.from(s.keys())[0]}.`)},get:(e,t)=>F.has(e)&&F.get(e).get(t)||null,remove(e,t){if(!F.has(e))return;const o=F.get(e);o.delete(t),0===o.size&&F.delete(e)}};function B(e){if("true"===e)return!0;if("false"===e)return!1;if(e===Number(e).toString())return Number(e);if(""===e||"null"===e)return null;if("string"!=typeof e)return e;try{return JSON.parse(decodeURIComponent(e))}catch(t){return e}}function R(e){return e.replace(/[A-Z]/g,(e=>`-${e.toLowerCase()}`))}const q={setDataAttribute(e,t,o){e.setAttribute(`data-bs-${R(t)}`,o)},removeDataAttribute(e,t){e.removeAttribute(`data-bs-${R(t)}`)},getDataAttributes(e){if(!e)return{};const t={},o=Object.keys(e.dataset).filter((e=>e.startsWith("bs")&&!e.startsWith("bsConfig")));for(const s of o){let o=s.replace(/^bs/,"");o=o.charAt(0).toLowerCase()+o.slice(1,o.length),t[o]=B(e.dataset[s])}return t},getDataAttribute:(e,t)=>B(e.getAttribute(`data-bs-${R(t)}`))};class V{static get Default(){return{}}static get DefaultType(){return{}}static get NAME(){throw new Error('You have to implement the static method "NAME", for each component!')}_getConfig(e){return e=this._mergeConfigObj(e),e=this._configAfterMerge(e),this._typeCheckConfig(e),e}_configAfterMerge(e){return e}_mergeConfigObj(e,t){const o=a(t)?q.getDataAttribute(t,"config"):{};return{...this.constructor.Default,..."object"==typeof o?o:{},...a(t)?q.getDataAttributes(t):{},..."object"==typeof e?e:{}}}_typeCheckConfig(e,t=this.constructor.DefaultType){for(const[s,i]of Object.entries(t)){const t=e[s],n=a(t)?"element":null==(o=t)?`${o}`:Object.prototype.toString.call(o).match(/\s([a-z]+)/i)[1].toLowerCase();if(!new RegExp(i).test(n))throw new TypeError(`${this.constructor.NAME.toUpperCase()}: Option "${s}" provided type "${n}" but expected type "${i}".`)}var o}}class z extends V{constructor(e,t){super(),(e=d(e))&&(this._element=e,this._config=this._getConfig(t),W.set(this._element,this.constructor.DATA_KEY,this))}dispose(){W.remove(this._element,this.constructor.DATA_KEY),I.off(this._element,this.constructor.EVENT_KEY);for(const e of Object.getOwnPropertyNames(this))this[e]=null}_queueCallback(e,t,o=!0){j(e,t,o)}_getConfig(e){return e=this._mergeConfigObj(e,this._element),e=this._configAfterMerge(e),this._typeCheckConfig(e),e}static getInstance(e){return W.get(d(e),this.DATA_KEY)}static getOrCreateInstance(e,t={}){return this.getInstance(e)||new this(e,"object"==typeof t?t:null)}static get VERSION(){return"5.3.0-alpha1"}static get DATA_KEY(){return`bs.${this.NAME}`}static get EVENT_KEY(){return`.${this.DATA_KEY}`}static eventName(e){return`${e}${this.EVENT_KEY}`}}const X=e=>{let t=e.getAttribute("data-bs-target");if(!t||"#"===t){let o=e.getAttribute("href");if(!o||!o.includes("#")&&!o.startsWith("."))return null;o.includes("#")&&!o.startsWith("#")&&(o=`#${o.split("#")[1]}`),t=o&&"#"!==o?o.trim():null}return r(t)},K={find:(e,t=document.documentElement)=>[].concat(...Element.prototype.querySelectorAll.call(t,e)),findOne:(e,t=document.documentElement)=>Element.prototype.querySelector.call(t,e),children:(e,t)=>[].concat(...e.children).filter((e=>e.matches(t))),parents(e,t){const o=[];let s=e.parentNode.closest(t);for(;s;)o.push(s),s=s.parentNode.closest(t);return o},prev(e,t){let o=e.previousElementSibling;for(;o;){if(o.matches(t))return[o];o=o.previousElementSibling}return[]},next(e,t){let o=e.nextElementSibling;for(;o;){if(o.matches(t))return[o];o=o.nextElementSibling}return[]},focusableChildren(e){const t=["a","button","input","textarea","select","details","[tabindex]",'[contenteditable="true"]'].map((e=>`${e}:not([tabindex^="-"])`)).join(",");return this.find(t,e).filter((e=>!u(e)&&c(e)))},getSelectorFromElement(e){const t=X(e);return t&&K.findOne(t)?t:null},getElementFromSelector(e){const t=X(e);return t?K.findOne(t):null},getMultipleElementsFromSelector(e){const t=X(e);return t?K.find(t):[]}},Y=(e,t="hide")=>{const o=`click.dismiss${e.EVENT_KEY}`,s=e.NAME;I.on(document,o,`[data-bs-dismiss="${s}"]`,(function(o){if(["A","AREA"].includes(this.tagName)&&o.preventDefault(),u(this))return;const i=K.getElementFromSelector(this)||this.closest(`.${s}`);e.getOrCreateInstance(i)[t]()}))},Q=".bs.alert",U=`close${Q}`,G=`closed${Q}`;class J extends z{static get NAME(){return"alert"}close(){if(I.trigger(this._element,U).defaultPrevented)return;this._element.classList.remove("show");const e=this._element.classList.contains("fade");this._queueCallback((()=>this._destroyElement()),this._element,e)}_destroyElement(){this._element.remove(),I.trigger(this._element,G),this.dispose()}static jQueryInterface(e){return this.each((function(){const t=J.getOrCreateInstance(this);if("string"==typeof e){if(void 0===t[e]||e.startsWith("_")||"constructor"===e)throw new TypeError(`No method named "${e}"`);t[e](this)}}))}}Y(J,"close"),b(J);const Z='[data-bs-toggle="button"]';class ee extends z{static get NAME(){return"button"}toggle(){this._element.setAttribute("aria-pressed",this._element.classList.toggle("active"))}static jQueryInterface(e){return this.each((function(){const t=ee.getOrCreateInstance(this);"toggle"===e&&t[e]()}))}}I.on(document,"click.bs.button.data-api",Z,(e=>{e.preventDefault();const t=e.target.closest(Z);ee.getOrCreateInstance(t).toggle()})),b(ee);const te=".bs.swipe",oe=`touchstart${te}`,se=`touchmove${te}`,ie=`touchend${te}`,ne=`pointerdown${te}`,re=`pointerup${te}`,le={endCallback:null,leftCallback:null,rightCallback:null},ae={endCallback:"(function|null)",leftCallback:"(function|null)",rightCallback:"(function|null)"};class de extends V{constructor(e,t){super(),this._element=e,e&&de.isSupported()&&(this._config=this._getConfig(t),this._deltaX=0,this._supportPointerEvents=Boolean(window.PointerEvent),this._initEvents())}static get Default(){return le}static get DefaultType(){return ae}static get NAME(){return"swipe"}dispose(){I.off(this._element,te)}_start(e){this._supportPointerEvents?this._eventIsPointerPenTouch(e)&&(this._deltaX=e.clientX):this._deltaX=e.touches[0].clientX}_end(e){this._eventIsPointerPenTouch(e)&&(this._deltaX=e.clientX-this._deltaX),this._handleSwipe(),v(this._config.endCallback)}_move(e){this._deltaX=e.touches&&e.touches.length>1?0:e.touches[0].clientX-this._deltaX}_handleSwipe(){const e=Math.abs(this._deltaX);if(e<=40)return;const t=e/this._deltaX;this._deltaX=0,t&&v(t>0?this._config.rightCallback:this._config.leftCallback)}_initEvents(){this._supportPointerEvents?(I.on(this._element,ne,(e=>this._start(e))),I.on(this._element,re,(e=>this._end(e))),this._element.classList.add("pointer-event")):(I.on(this._element,oe,(e=>this._start(e))),I.on(this._element,se,(e=>this._move(e))),I.on(this._element,ie,(e=>this._end(e))))}_eventIsPointerPenTouch(e){return this._supportPointerEvents&&("pen"===e.pointerType||"touch"===e.pointerType)}static isSupported(){return"ontouchstart"in document.documentElement||navigator.maxTouchPoints>0}}const ce=".bs.carousel",ue=".data-api",pe="next",fe="prev",me="left",he="right",ge=`slide${ce}`,_e=`slid${ce}`,be=`keydown${ce}`,ve=`mouseenter${ce}`,je=`mouseleave${ce}`,ye=`dragstart${ce}`,we=`load${ce}${ue}`,Ee=`click${ce}${ue}`,Ae="carousel",Oe="active",Ce=".active",Te=".carousel-item",xe=Ce+Te,Se={ArrowLeft:he,ArrowRight:me},Pe={interval:5e3,keyboard:!0,pause:"hover",ride:!1,touch:!0,wrap:!0},ke={interval:"(number|boolean)",keyboard:"boolean",pause:"(string|boolean)",ride:"(boolean|string)",touch:"boolean",wrap:"boolean"};class Le extends z{constructor(e,t){super(e,t),this._interval=null,this._activeElement=null,this._isSliding=!1,this.touchTimeout=null,this._swipeHelper=null,this._indicatorsElement=K.findOne(".carousel-indicators",this._element),this._addEventListeners(),this._config.ride===Ae&&this.cycle()}static get Default(){return Pe}static get DefaultType(){return ke}static get NAME(){return"carousel"}next(){this._slide(pe)}nextWhenVisible(){!document.hidden&&c(this._element)&&this.next()}prev(){this._slide(fe)}pause(){this._isSliding&&l(this._element),this._clearInterval()}cycle(){this._clearInterval(),this._updateInterval(),this._interval=setInterval((()=>this.nextWhenVisible()),this._config.interval)}_maybeEnableCycle(){this._config.ride&&(this._isSliding?I.one(this._element,_e,(()=>this.cycle())):this.cycle())}to(e){const t=this._getItems();if(e>t.length-1||e<0)return;if(this._isSliding)return void I.one(this._element,_e,(()=>this.to(e)));const o=this._getItemIndex(this._getActive());if(o===e)return;const s=e>o?pe:fe;this._slide(s,t[e])}dispose(){this._swipeHelper&&this._swipeHelper.dispose(),super.dispose()}_configAfterMerge(e){return e.defaultInterval=e.interval,e}_addEventListeners(){this._config.keyboard&&I.on(this._element,be,(e=>this._keydown(e))),"hover"===this._config.pause&&(I.on(this._element,ve,(()=>this.pause())),I.on(this._element,je,(()=>this._maybeEnableCycle()))),this._config.touch&&de.isSupported()&&this._addTouchEventListeners()}_addTouchEventListeners(){for(const e of K.find(".carousel-item img",this._element))I.on(e,ye,(e=>e.preventDefault()));const e={leftCallback:()=>this._slide(this._directionToOrder(me)),rightCallback:()=>this._slide(this._directionToOrder(he)),endCallback:()=>{"hover"===this._config.pause&&(this.pause(),this.touchTimeout&&clearTimeout(this.touchTimeout),this.touchTimeout=setTimeout((()=>this._maybeEnableCycle()),500+this._config.interval))}};this._swipeHelper=new de(this._element,e)}_keydown(e){if(/input|textarea/i.test(e.target.tagName))return;const t=Se[e.key];t&&(e.preventDefault(),this._slide(this._directionToOrder(t)))}_getItemIndex(e){return this._getItems().indexOf(e)}_setActiveIndicatorElement(e){if(!this._indicatorsElement)return;const t=K.findOne(Ce,this._indicatorsElement);t.classList.remove(Oe),t.removeAttribute("aria-current");const o=K.findOne(`[data-bs-slide-to="${e}"]`,this._indicatorsElement);o&&(o.classList.add(Oe),o.setAttribute("aria-current","true"))}_updateInterval(){const e=this._activeElement||this._getActive();if(!e)return;const t=Number.parseInt(e.getAttribute("data-bs-interval"),10);this._config.interval=t||this._config.defaultInterval}_slide(e,t=null){if(this._isSliding)return;const o=this._getActive(),s=e===pe,i=t||y(this._getItems(),o,s,this._config.wrap);if(i===o)return;const n=this._getItemIndex(i),r=t=>I.trigger(this._element,t,{relatedTarget:i,direction:this._orderToDirection(e),from:this._getItemIndex(o),to:n});if(r(ge).defaultPrevented)return;if(!o||!i)return;const l=Boolean(this._interval);this.pause(),this._isSliding=!0,this._setActiveIndicatorElement(n),this._activeElement=i;const a=s?"carousel-item-start":"carousel-item-end",d=s?"carousel-item-next":"carousel-item-prev";i.classList.add(d),m(i),o.classList.add(a),i.classList.add(a);this._queueCallback((()=>{i.classList.remove(a,d),i.classList.add(Oe),o.classList.remove(Oe,d,a),this._isSliding=!1,r(_e)}),o,this._isAnimated()),l&&this.cycle()}_isAnimated(){return this._element.classList.contains("slide")}_getActive(){return K.findOne(xe,this._element)}_getItems(){return K.find(Te,this._element)}_clearInterval(){this._interval&&(clearInterval(this._interval),this._interval=null)}_directionToOrder(e){return _()?e===me?fe:pe:e===me?pe:fe}_orderToDirection(e){return _()?e===fe?me:he:e===fe?he:me}static jQueryInterface(e){return this.each((function(){const t=Le.getOrCreateInstance(this,e);if("number"!=typeof e){if("string"==typeof e){if(void 0===t[e]||e.startsWith("_")||"constructor"===e)throw new TypeError(`No method named "${e}"`);t[e]()}}else t.to(e)}))}}I.on(document,Ee,"[data-bs-slide], [data-bs-slide-to]",(function(e){const t=K.getElementFromSelector(this);if(!t||!t.classList.contains(Ae))return;e.preventDefault();const o=Le.getOrCreateInstance(t),s=this.getAttribute("data-bs-slide-to");return s?(o.to(s),void o._maybeEnableCycle()):"next"===q.getDataAttribute(this,"slide")?(o.next(),void o._maybeEnableCycle()):(o.prev(),void o._maybeEnableCycle())})),I.on(window,we,(()=>{const e=K.find('[data-bs-ride="carousel"]');for(const t of e)Le.getOrCreateInstance(t)})),b(Le);const De=".bs.collapse",Ne=`show${De}`,Me=`shown${De}`,$e=`hide${De}`,Ie=`hidden${De}`,He=`click${De}.data-api`,Fe="show",We="collapse",Be="collapsing",Re=`:scope .${We} .${We}`,qe='[data-bs-toggle="collapse"]',Ve={parent:null,toggle:!0},ze={parent:"(null|element)",toggle:"boolean"};class Xe extends z{constructor(e,t){super(e,t),this._isTransitioning=!1,this._triggerArray=[];const o=K.find(qe);for(const e of o){const t=K.getSelectorFromElement(e),o=K.find(t).filter((e=>e===this._element));null!==t&&o.length&&this._triggerArray.push(e)}this._initializeChildren(),this._config.parent||this._addAriaAndCollapsedClass(this._triggerArray,this._isShown()),this._config.toggle&&this.toggle()}static get Default(){return Ve}static get DefaultType(){return ze}static get NAME(){return"collapse"}toggle(){this._isShown()?this.hide():this.show()}show(){if(this._isTransitioning||this._isShown())return;let e=[];if(this._config.parent&&(e=this._getFirstLevelChildren(".collapse.show, .collapse.collapsing").filter((e=>e!==this._element)).map((e=>Xe.getOrCreateInstance(e,{toggle:!1})))),e.length&&e[0]._isTransitioning)return;if(I.trigger(this._element,Ne).defaultPrevented)return;for(const t of e)t.hide();const t=this._getDimension();this._element.classList.remove(We),this._element.classList.add(Be),this._element.style[t]=0,this._addAriaAndCollapsedClass(this._triggerArray,!0),this._isTransitioning=!0;const o=`scroll${t[0].toUpperCase()+t.slice(1)}`;this._queueCallback((()=>{this._isTransitioning=!1,this._element.classList.remove(Be),this._element.classList.add(We,Fe),this._element.style[t]="",I.trigger(this._element,Me)}),this._element,!0),this._element.style[t]=`${this._element[o]}px`}hide(){if(this._isTransitioning||!this._isShown())return;if(I.trigger(this._element,$e).defaultPrevented)return;const e=this._getDimension();this._element.style[e]=`${this._element.getBoundingClientRect()[e]}px`,m(this._element),this._element.classList.add(Be),this._element.classList.remove(We,Fe);for(const e of this._triggerArray){const t=K.getElementFromSelector(e);t&&!this._isShown(t)&&this._addAriaAndCollapsedClass([e],!1)}this._isTransitioning=!0;this._element.style[e]="",this._queueCallback((()=>{this._isTransitioning=!1,this._element.classList.remove(Be),this._element.classList.add(We),I.trigger(this._element,Ie)}),this._element,!0)}_isShown(e=this._element){return e.classList.contains(Fe)}_configAfterMerge(e){return e.toggle=Boolean(e.toggle),e.parent=d(e.parent),e}_getDimension(){return this._element.classList.contains("collapse-horizontal")?"width":"height"}_initializeChildren(){if(!this._config.parent)return;const e=this._getFirstLevelChildren(qe);for(const t of e){const e=K.getElementFromSelector(t);e&&this._addAriaAndCollapsedClass([t],this._isShown(e))}}_getFirstLevelChildren(e){const t=K.find(Re,this._config.parent);return K.find(e,this._config.parent).filter((e=>!t.includes(e)))}_addAriaAndCollapsedClass(e,t){if(e.length)for(const o of e)o.classList.toggle("collapsed",!t),o.setAttribute("aria-expanded",t)}static jQueryInterface(e){const t={};return"string"==typeof e&&/show|hide/.test(e)&&(t.toggle=!1),this.each((function(){const o=Xe.getOrCreateInstance(this,t);if("string"==typeof e){if(void 0===o[e])throw new TypeError(`No method named "${e}"`);o[e]()}}))}}I.on(document,He,qe,(function(e){("A"===e.target.tagName||e.delegateTarget&&"A"===e.delegateTarget.tagName)&&e.preventDefault();for(const e of K.getMultipleElementsFromSelector(this))Xe.getOrCreateInstance(e,{toggle:!1}).toggle()})),b(Xe);const Ke="dropdown",Ye=".bs.dropdown",Qe=".data-api",Ue="ArrowUp",Ge="ArrowDown",Je=`hide${Ye}`,Ze=`hidden${Ye}`,et=`show${Ye}`,tt=`shown${Ye}`,ot=`click${Ye}${Qe}`,st=`keydown${Ye}${Qe}`,it=`keyup${Ye}${Qe}`,nt="show",rt='[data-bs-toggle="dropdown"]:not(.disabled):not(:disabled)',lt=`${rt}.${nt}`,at=".dropdown-menu",dt=_()?"top-end":"top-start",ct=_()?"top-start":"top-end",ut=_()?"bottom-end":"bottom-start",pt=_()?"bottom-start":"bottom-end",ft=_()?"left-start":"right-start",mt=_()?"right-start":"left-start",ht={autoClose:!0,boundary:"clippingParents",display:"dynamic",offset:[0,2],popperConfig:null,reference:"toggle"},gt={autoClose:"(boolean|string)",boundary:"(string|element)",display:"string",offset:"(array|string|function)",popperConfig:"(null|object|function)",reference:"(string|element|object)"};class _t extends z{constructor(e,t){super(e,t),this._popper=null,this._parent=this._element.parentNode,this._menu=K.next(this._element,at)[0]||K.prev(this._element,at)[0]||K.findOne(at,this._parent),this._inNavbar=this._detectNavbar()}static get Default(){return ht}static get DefaultType(){return gt}static get NAME(){return Ke}toggle(){return this._isShown()?this.hide():this.show()}show(){if(u(this._element)||this._isShown())return;const e={relatedTarget:this._element};if(!I.trigger(this._element,et,e).defaultPrevented){if(this._createPopper(),"ontouchstart"in document.documentElement&&!this._parent.closest(".navbar-nav"))for(const e of[].concat(...document.body.children))I.on(e,"mouseover",f);this._element.focus(),this._element.setAttribute("aria-expanded",!0),this._menu.classList.add(nt),this._element.classList.add(nt),I.trigger(this._element,tt,e)}}hide(){if(u(this._element)||!this._isShown())return;const e={relatedTarget:this._element};this._completeHide(e)}dispose(){this._popper&&this._popper.destroy(),super.dispose()}update(){this._inNavbar=this._detectNavbar(),this._popper&&this._popper.update()}_completeHide(e){if(!I.trigger(this._element,Je,e).defaultPrevented){if("ontouchstart"in document.documentElement)for(const e of[].concat(...document.body.children))I.off(e,"mouseover",f);this._popper&&this._popper.destroy(),this._menu.classList.remove(nt),this._element.classList.remove(nt),this._element.setAttribute("aria-expanded","false"),q.removeDataAttribute(this._menu,"popper"),I.trigger(this._element,Ze,e)}}_getConfig(e){if("object"==typeof(e=super._getConfig(e)).reference&&!a(e.reference)&&"function"!=typeof e.reference.getBoundingClientRect)throw new TypeError(`${Ke.toUpperCase()}: Option "reference" provided type "object" without a required "getBoundingClientRect" method.`);return e}_createPopper(){if(void 0===s)throw new TypeError("Bootstrap's dropdowns require Popper (https://popper.js.org)");let e=this._element;"parent"===this._config.reference?e=this._parent:a(this._config.reference)?e=d(this._config.reference):"object"==typeof this._config.reference&&(e=this._config.reference);const t=this._getPopperConfig();this._popper=i.createPopper(e,this._menu,t)}_isShown(){return this._menu.classList.contains(nt)}_getPlacement(){const e=this._parent;if(e.classList.contains("dropend"))return ft;if(e.classList.contains("dropstart"))return mt;if(e.classList.contains("dropup-center"))return"top";if(e.classList.contains("dropdown-center"))return"bottom";const t="end"===getComputedStyle(this._menu).getPropertyValue("--bs-position").trim();return e.classList.contains("dropup")?t?ct:dt:t?pt:ut}_detectNavbar(){return null!==this._element.closest(".navbar")}_getOffset(){const{offset:e}=this._config;return"string"==typeof e?e.split(",").map((e=>Number.parseInt(e,10))):"function"==typeof e?t=>e(t,this._element):e}_getPopperConfig(){const e={placement:this._getPlacement(),modifiers:[{name:"preventOverflow",options:{boundary:this._config.boundary}},{name:"offset",options:{offset:this._getOffset()}}]};return(this._inNavbar||"static"===this._config.display)&&(q.setDataAttribute(this._menu,"popper","static"),e.modifiers=[{name:"applyStyles",enabled:!1}]),{...e,...v(this._config.popperConfig,[e])}}_selectMenuItem({key:e,target:t}){const o=K.find(".dropdown-menu .dropdown-item:not(.disabled):not(:disabled)",this._menu).filter((e=>c(e)));o.length&&y(o,t,e===Ge,!o.includes(t)).focus()}static jQueryInterface(e){return this.each((function(){const t=_t.getOrCreateInstance(this,e);if("string"==typeof e){if(void 0===t[e])throw new TypeError(`No method named "${e}"`);t[e]()}}))}static clearMenus(e){if(2===e.button||"keyup"===e.type&&"Tab"!==e.key)return;const t=K.find(lt);for(const o of t){const t=_t.getInstance(o);if(!t||!1===t._config.autoClose)continue;const s=e.composedPath(),i=s.includes(t._menu);if(s.includes(t._element)||"inside"===t._config.autoClose&&!i||"outside"===t._config.autoClose&&i)continue;if(t._menu.contains(e.target)&&("keyup"===e.type&&"Tab"===e.key||/input|select|option|textarea|form/i.test(e.target.tagName)))continue;const n={relatedTarget:t._element};"click"===e.type&&(n.clickEvent=e),t._completeHide(n)}}static dataApiKeydownHandler(e){const t=/input|textarea/i.test(e.target.tagName),o="Escape"===e.key,s=[Ue,Ge].includes(e.key);if(!s&&!o)return;if(t&&!o)return;e.preventDefault();const i=this.matches(rt)?this:K.prev(this,rt)[0]||K.next(this,rt)[0]||K.findOne(rt,e.delegateTarget.parentNode),n=_t.getOrCreateInstance(i);if(s)return e.stopPropagation(),n.show(),void n._selectMenuItem(e);n._isShown()&&(e.stopPropagation(),n.hide(),i.focus())}}I.on(document,st,rt,_t.dataApiKeydownHandler),I.on(document,st,at,_t.dataApiKeydownHandler),I.on(document,ot,_t.clearMenus),I.on(document,it,_t.clearMenus),I.on(document,ot,rt,(function(e){e.preventDefault(),_t.getOrCreateInstance(this).toggle()})),b(_t);const bt=".fixed-top, .fixed-bottom, .is-fixed, .sticky-top",vt=".sticky-top",jt="padding-right",yt="margin-right";class wt{constructor(){this._element=document.body}getWidth(){const e=document.documentElement.clientWidth;return Math.abs(window.innerWidth-e)}hide(){const e=this.getWidth();this._disableOverFlow(),this._setElementAttributes(this._element,jt,(t=>t+e)),this._setElementAttributes(bt,jt,(t=>t+e)),this._setElementAttributes(vt,yt,(t=>t-e))}reset(){this._resetElementAttributes(this._element,"overflow"),this._resetElementAttributes(this._element,jt),this._resetElementAttributes(bt,jt),this._resetElementAttributes(vt,yt)}isOverflowing(){return this.getWidth()>0}_disableOverFlow(){this._saveInitialAttribute(this._element,"overflow"),this._element.style.overflow="hidden"}_setElementAttributes(e,t,o){const s=this.getWidth();this._applyManipulationCallback(e,(e=>{if(e!==this._element&&window.innerWidth>e.clientWidth+s)return;this._saveInitialAttribute(e,t);const i=window.getComputedStyle(e).getPropertyValue(t);e.style.setProperty(t,`${o(Number.parseFloat(i))}px`)}))}_saveInitialAttribute(e,t){const o=e.style.getPropertyValue(t);o&&q.setDataAttribute(e,t,o)}_resetElementAttributes(e,t){this._applyManipulationCallback(e,(e=>{const o=q.getDataAttribute(e,t);null!==o?(q.removeDataAttribute(e,t),e.style.setProperty(t,o)):e.style.removeProperty(t)}))}_applyManipulationCallback(e,t){if(a(e))t(e);else for(const o of K.find(e,this._element))t(o)}}const Et="backdrop",At="show",Ot=`mousedown.bs.${Et}`,Ct={className:"modal-backdrop",clickCallback:null,isAnimated:!1,isVisible:!0,rootElement:"body"},Tt={className:"string",clickCallback:"(function|null)",isAnimated:"boolean",isVisible:"boolean",rootElement:"(element|string)"};class xt extends V{constructor(e){super(),this._config=this._getConfig(e),this._isAppended=!1,this._element=null}static get Default(){return Ct}static get DefaultType(){return Tt}static get NAME(){return Et}show(e){if(!this._config.isVisible)return void v(e);this._append();const t=this._getElement();this._config.isAnimated&&m(t),t.classList.add(At),this._emulateAnimation((()=>{v(e)}))}hide(e){this._config.isVisible?(this._getElement().classList.remove(At),this._emulateAnimation((()=>{this.dispose(),v(e)}))):v(e)}dispose(){this._isAppended&&(I.off(this._element,Ot),this._element.remove(),this._isAppended=!1)}_getElement(){if(!this._element){const e=document.createElement("div");e.className=this._config.className,this._config.isAnimated&&e.classList.add("fade"),this._element=e}return this._element}_configAfterMerge(e){return e.rootElement=d(e.rootElement),e}_append(){if(this._isAppended)return;const e=this._getElement();this._config.rootElement.append(e),I.on(e,Ot,(()=>{v(this._config.clickCallback)})),this._isAppended=!0}_emulateAnimation(e){j(e,this._getElement(),this._config.isAnimated)}}const St=".bs.focustrap",Pt=`focusin${St}`,kt=`keydown.tab${St}`,Lt="backward",Dt={autofocus:!0,trapElement:null},Nt={autofocus:"boolean",trapElement:"element"};class Mt extends V{constructor(e){super(),this._config=this._getConfig(e),this._isActive=!1,this._lastTabNavDirection=null}static get Default(){return Dt}static get DefaultType(){return Nt}static get NAME(){return"focustrap"}activate(){this._isActive||(this._config.autofocus&&this._config.trapElement.focus(),I.off(document,St),I.on(document,Pt,(e=>this._handleFocusin(e))),I.on(document,kt,(e=>this._handleKeydown(e))),this._isActive=!0)}deactivate(){this._isActive&&(this._isActive=!1,I.off(document,St))}_handleFocusin(e){const{trapElement:t}=this._config;if(e.target===document||e.target===t||t.contains(e.target))return;const o=K.focusableChildren(t);0===o.length?t.focus():this._lastTabNavDirection===Lt?o[o.length-1].focus():o[0].focus()}_handleKeydown(e){"Tab"===e.key&&(this._lastTabNavDirection=e.shiftKey?Lt:"forward")}}const $t=".bs.modal",It=`hide${$t}`,Ht=`hidePrevented${$t}`,Ft=`hidden${$t}`,Wt=`show${$t}`,Bt=`shown${$t}`,Rt=`resize${$t}`,qt=`click.dismiss${$t}`,Vt=`mousedown.dismiss${$t}`,zt=`keydown.dismiss${$t}`,Xt=`click${$t}.data-api`,Kt="modal-open",Yt="show",Qt="modal-static",Ut={backdrop:!0,focus:!0,keyboard:!0},Gt={backdrop:"(boolean|string)",focus:"boolean",keyboard:"boolean"};class Jt extends z{constructor(e,t){super(e,t),this._dialog=K.findOne(".modal-dialog",this._element),this._backdrop=this._initializeBackDrop(),this._focustrap=this._initializeFocusTrap(),this._isShown=!1,this._isTransitioning=!1,this._scrollBar=new wt,this._addEventListeners()}static get Default(){return Ut}static get DefaultType(){return Gt}static get NAME(){return"modal"}toggle(e){return this._isShown?this.hide():this.show(e)}show(e){if(this._isShown||this._isTransitioning)return;I.trigger(this._element,Wt,{relatedTarget:e}).defaultPrevented||(this._isShown=!0,this._isTransitioning=!0,this._scrollBar.hide(),document.body.classList.add(Kt),this._adjustDialog(),this._backdrop.show((()=>this._showElement(e))))}hide(){if(!this._isShown||this._isTransitioning)return;I.trigger(this._element,It).defaultPrevented||(this._isShown=!1,this._isTransitioning=!0,this._focustrap.deactivate(),this._element.classList.remove(Yt),this._queueCallback((()=>this._hideModal()),this._element,this._isAnimated()))}dispose(){for(const e of[window,this._dialog])I.off(e,$t);this._backdrop.dispose(),this._focustrap.deactivate(),super.dispose()}handleUpdate(){this._adjustDialog()}_initializeBackDrop(){return new xt({isVisible:Boolean(this._config.backdrop),isAnimated:this._isAnimated()})}_initializeFocusTrap(){return new Mt({trapElement:this._element})}_showElement(e){document.body.contains(this._element)||document.body.append(this._element),this._element.style.display="block",this._element.removeAttribute("aria-hidden"),this._element.setAttribute("aria-modal",!0),this._element.setAttribute("role","dialog"),this._element.scrollTop=0;const t=K.findOne(".modal-body",this._dialog);t&&(t.scrollTop=0),m(this._element),this._element.classList.add(Yt);this._queueCallback((()=>{this._config.focus&&this._focustrap.activate(),this._isTransitioning=!1,I.trigger(this._element,Bt,{relatedTarget:e})}),this._dialog,this._isAnimated())}_addEventListeners(){I.on(this._element,zt,(e=>{if("Escape"===e.key)return this._config.keyboard?(e.preventDefault(),void this.hide()):void this._triggerBackdropTransition()})),I.on(window,Rt,(()=>{this._isShown&&!this._isTransitioning&&this._adjustDialog()})),I.on(this._element,Vt,(e=>{I.one(this._element,qt,(t=>{this._element===e.target&&this._element===t.target&&("static"!==this._config.backdrop?this._config.backdrop&&this.hide():this._triggerBackdropTransition())}))}))}_hideModal(){this._element.style.display="none",this._element.setAttribute("aria-hidden",!0),this._element.removeAttribute("aria-modal"),this._element.removeAttribute("role"),this._isTransitioning=!1,this._backdrop.hide((()=>{document.body.classList.remove(Kt),this._resetAdjustments(),this._scrollBar.reset(),I.trigger(this._element,Ft)}))}_isAnimated(){return this._element.classList.contains("fade")}_triggerBackdropTransition(){if(I.trigger(this._element,Ht).defaultPrevented)return;const e=this._element.scrollHeight>document.documentElement.clientHeight,t=this._element.style.overflowY;"hidden"===t||this._element.classList.contains(Qt)||(e||(this._element.style.overflowY="hidden"),this._element.classList.add(Qt),this._queueCallback((()=>{this._element.classList.remove(Qt),this._queueCallback((()=>{this._element.style.overflowY=t}),this._dialog)}),this._dialog),this._element.focus())}_adjustDialog(){const e=this._element.scrollHeight>document.documentElement.clientHeight,t=this._scrollBar.getWidth(),o=t>0;if(o&&!e){const e=_()?"paddingLeft":"paddingRight";this._element.style[e]=`${t}px`}if(!o&&e){const e=_()?"paddingRight":"paddingLeft";this._element.style[e]=`${t}px`}}_resetAdjustments(){this._element.style.paddingLeft="",this._element.style.paddingRight=""}static jQueryInterface(e,t){return this.each((function(){const o=Jt.getOrCreateInstance(this,e);if("string"==typeof e){if(void 0===o[e])throw new TypeError(`No method named "${e}"`);o[e](t)}}))}}I.on(document,Xt,'[data-bs-toggle="modal"]',(function(e){const t=K.getElementFromSelector(this);["A","AREA"].includes(this.tagName)&&e.preventDefault(),I.one(t,Wt,(e=>{e.defaultPrevented||I.one(t,Ft,(()=>{c(this)&&this.focus()}))}));const o=K.findOne(".modal.show");o&&Jt.getInstance(o).hide();Jt.getOrCreateInstance(t).toggle(this)})),Y(Jt),b(Jt);const Zt=".bs.offcanvas",eo=".data-api",to=`load${Zt}${eo}`,oo="show",so="showing",io="hiding",no=".offcanvas.show",ro=`show${Zt}`,lo=`shown${Zt}`,ao=`hide${Zt}`,co=`hidePrevented${Zt}`,uo=`hidden${Zt}`,po=`resize${Zt}`,fo=`click${Zt}${eo}`,mo=`keydown.dismiss${Zt}`,ho={backdrop:!0,keyboard:!0,scroll:!1},go={backdrop:"(boolean|string)",keyboard:"boolean",scroll:"boolean"};class _o extends z{constructor(e,t){super(e,t),this._isShown=!1,this._backdrop=this._initializeBackDrop(),this._focustrap=this._initializeFocusTrap(),this._addEventListeners()}static get Default(){return ho}static get DefaultType(){return go}static get NAME(){return"offcanvas"}toggle(e){return this._isShown?this.hide():this.show(e)}show(e){if(this._isShown)return;if(I.trigger(this._element,ro,{relatedTarget:e}).defaultPrevented)return;this._isShown=!0,this._backdrop.show(),this._config.scroll||(new wt).hide(),this._element.setAttribute("aria-modal",!0),this._element.setAttribute("role","dialog"),this._element.classList.add(so);this._queueCallback((()=>{this._config.scroll&&!this._config.backdrop||this._focustrap.activate(),this._element.classList.add(oo),this._element.classList.remove(so),I.trigger(this._element,lo,{relatedTarget:e})}),this._element,!0)}hide(){if(!this._isShown)return;if(I.trigger(this._element,ao).defaultPrevented)return;this._focustrap.deactivate(),this._element.blur(),this._isShown=!1,this._element.classList.add(io),this._backdrop.hide();this._queueCallback((()=>{this._element.classList.remove(oo,io),this._element.removeAttribute("aria-modal"),this._element.removeAttribute("role"),this._config.scroll||(new wt).reset(),I.trigger(this._element,uo)}),this._element,!0)}dispose(){this._backdrop.dispose(),this._focustrap.deactivate(),super.dispose()}_initializeBackDrop(){const e=Boolean(this._config.backdrop);return new xt({className:"offcanvas-backdrop",isVisible:e,isAnimated:!0,rootElement:this._element.parentNode,clickCallback:e?()=>{"static"!==this._config.backdrop?this.hide():I.trigger(this._element,co)}:null})}_initializeFocusTrap(){return new Mt({trapElement:this._element})}_addEventListeners(){I.on(this._element,mo,(e=>{"Escape"===e.key&&(this._config.keyboard?this.hide():I.trigger(this._element,co))}))}static jQueryInterface(e){return this.each((function(){const t=_o.getOrCreateInstance(this,e);if("string"==typeof e){if(void 0===t[e]||e.startsWith("_")||"constructor"===e)throw new TypeError(`No method named "${e}"`);t[e](this)}}))}}I.on(document,fo,'[data-bs-toggle="offcanvas"]',(function(e){const t=K.getElementFromSelector(this);if(["A","AREA"].includes(this.tagName)&&e.preventDefault(),u(this))return;I.one(t,uo,(()=>{c(this)&&this.focus()}));const o=K.findOne(no);o&&o!==t&&_o.getInstance(o).hide();_o.getOrCreateInstance(t).toggle(this)})),I.on(window,to,(()=>{for(const e of K.find(no))_o.getOrCreateInstance(e).show()})),I.on(window,po,(()=>{for(const e of K.find("[aria-modal][class*=show][class*=offcanvas-]"))"fixed"!==getComputedStyle(e).position&&_o.getOrCreateInstance(e).hide()})),Y(_o),b(_o);const bo=new Set(["background","cite","href","itemtype","longdesc","poster","src","xlink:href"]),vo=/^(?:(?:https?|mailto|ftp|tel|file|sms):|[^#&/:?]*(?:[#/?]|$))/i,jo=/^data:(?:image\/(?:bmp|gif|jpeg|jpg|png|tiff|webp)|video\/(?:mpeg|mp4|ogg|webm)|audio\/(?:mp3|oga|ogg|opus));base64,[\d+/a-z]+=*$/i,yo=(e,t)=>{const o=e.nodeName.toLowerCase();return t.includes(o)?!bo.has(o)||Boolean(vo.test(e.nodeValue)||jo.test(e.nodeValue)):t.filter((e=>e instanceof RegExp)).some((e=>e.test(o)))},wo={"*":["class","dir","id","lang","role",/^aria-[\w-]*$/i],a:["target","href","title","rel"],area:[],b:[],br:[],col:[],code:[],div:[],em:[],hr:[],h1:[],h2:[],h3:[],h4:[],h5:[],h6:[],i:[],img:["src","srcset","alt","title","width","height"],li:[],ol:[],p:[],pre:[],s:[],small:[],span:[],sub:[],sup:[],strong:[],u:[],ul:[]};const Eo={allowList:wo,content:{},extraClass:"",html:!1,sanitize:!0,sanitizeFn:null,template:"<div></div>"},Ao={allowList:"object",content:"object",extraClass:"(string|function)",html:"boolean",sanitize:"boolean",sanitizeFn:"(null|function)",template:"string"},Oo={entry:"(string|element|function|null)",selector:"(string|element)"};class Co extends V{constructor(e){super(),this._config=this._getConfig(e)}static get Default(){return Eo}static get DefaultType(){return Ao}static get NAME(){return"TemplateFactory"}getContent(){return Object.values(this._config.content).map((e=>this._resolvePossibleFunction(e))).filter(Boolean)}hasContent(){return this.getContent().length>0}changeContent(e){return this._checkContent(e),this._config.content={...this._config.content,...e},this}toHtml(){const e=document.createElement("div");e.innerHTML=this._maybeSanitize(this._config.template);for(const[t,o]of Object.entries(this._config.content))this._setContent(e,o,t);const t=e.children[0],o=this._resolvePossibleFunction(this._config.extraClass);return o&&t.classList.add(...o.split(" ")),t}_typeCheckConfig(e){super._typeCheckConfig(e),this._checkContent(e.content)}_checkContent(e){for(const[t,o]of Object.entries(e))super._typeCheckConfig({selector:t,entry:o},Oo)}_setContent(e,t,o){const s=K.findOne(o,e);s&&((t=this._resolvePossibleFunction(t))?a(t)?this._putElementInTemplate(d(t),s):this._config.html?s.innerHTML=this._maybeSanitize(t):s.textContent=t:s.remove())}_maybeSanitize(e){return this._config.sanitize?function(e,t,o){if(!e.length)return e;if(o&&"function"==typeof o)return o(e);const s=(new window.DOMParser).parseFromString(e,"text/html"),i=[].concat(...s.body.querySelectorAll("*"));for(const e of i){const o=e.nodeName.toLowerCase();if(!Object.keys(t).includes(o)){e.remove();continue}const s=[].concat(...e.attributes),i=[].concat(t["*"]||[],t[o]||[]);for(const t of s)yo(t,i)||e.removeAttribute(t.nodeName)}return s.body.innerHTML}(e,this._config.allowList,this._config.sanitizeFn):e}_resolvePossibleFunction(e){return v(e,[this])}_putElementInTemplate(e,t){if(this._config.html)return t.innerHTML="",void t.append(e);t.textContent=e.textContent}}const To=new Set(["sanitize","allowList","sanitizeFn"]),xo="fade",So="show",Po=".modal",ko="hide.bs.modal",Lo="hover",Do="focus",No={AUTO:"auto",TOP:"top",RIGHT:_()?"left":"right",BOTTOM:"bottom",LEFT:_()?"right":"left"},Mo={allowList:wo,animation:!0,boundary:"clippingParents",container:!1,customClass:"",delay:0,fallbackPlacements:["top","right","bottom","left"],html:!1,offset:[0,0],placement:"top",popperConfig:null,sanitize:!0,sanitizeFn:null,selector:!1,template:'<div class="tooltip" role="tooltip"><div class="tooltip-arrow"></div><div class="tooltip-inner"></div></div>',title:"",trigger:"hover focus"},$o={allowList:"object",animation:"boolean",boundary:"(string|element)",container:"(string|element|boolean)",customClass:"(string|function)",delay:"(number|object)",fallbackPlacements:"array",html:"boolean",offset:"(array|string|function)",placement:"(string|function)",popperConfig:"(null|object|function)",sanitize:"boolean",sanitizeFn:"(null|function)",selector:"(string|boolean)",template:"string",title:"(string|element|function)",trigger:"string"};class Io extends z{constructor(e,t){if(void 0===s)throw new TypeError("Bootstrap's tooltips require Popper (https://popper.js.org)");super(e,t),this._isEnabled=!0,this._timeout=0,this._isHovered=null,this._activeTrigger={},this._popper=null,this._templateFactory=null,this._newContent=null,this.tip=null,this._setListeners(),this._config.selector||this._fixTitle()}static get Default(){return Mo}static get DefaultType(){return $o}static get NAME(){return"tooltip"}enable(){this._isEnabled=!0}disable(){this._isEnabled=!1}toggleEnabled(){this._isEnabled=!this._isEnabled}toggle(){this._isEnabled&&(this._activeTrigger.click=!this._activeTrigger.click,this._isShown()?this._leave():this._enter())}dispose(){clearTimeout(this._timeout),I.off(this._element.closest(Po),ko,this._hideModalHandler),this._element.getAttribute("data-bs-original-title")&&this._element.setAttribute("title",this._element.getAttribute("data-bs-original-title")),this._disposePopper(),super.dispose()}show(){if("none"===this._element.style.display)throw new Error("Please use show on visible elements");if(!this._isWithContent()||!this._isEnabled)return;const e=I.trigger(this._element,this.constructor.eventName("show")),t=(p(this._element)||this._element.ownerDocument.documentElement).contains(this._element);if(e.defaultPrevented||!t)return;this._disposePopper();const o=this._getTipElement();this._element.setAttribute("aria-describedby",o.getAttribute("id"));const{container:s}=this._config;if(this._element.ownerDocument.documentElement.contains(this.tip)||(s.append(o),I.trigger(this._element,this.constructor.eventName("inserted"))),this._popper=this._createPopper(o),o.classList.add(So),"ontouchstart"in document.documentElement)for(const e of[].concat(...document.body.children))I.on(e,"mouseover",f);this._queueCallback((()=>{I.trigger(this._element,this.constructor.eventName("shown")),!1===this._isHovered&&this._leave(),this._isHovered=!1}),this.tip,this._isAnimated())}hide(){if(!this._isShown())return;if(I.trigger(this._element,this.constructor.eventName("hide")).defaultPrevented)return;if(this._getTipElement().classList.remove(So),"ontouchstart"in document.documentElement)for(const e of[].concat(...document.body.children))I.off(e,"mouseover",f);this._activeTrigger.click=!1,this._activeTrigger[Do]=!1,this._activeTrigger[Lo]=!1,this._isHovered=null;this._queueCallback((()=>{this._isWithActiveTrigger()||(this._isHovered||this._disposePopper(),this._element.removeAttribute("aria-describedby"),I.trigger(this._element,this.constructor.eventName("hidden")))}),this.tip,this._isAnimated())}update(){this._popper&&this._popper.update()}_isWithContent(){return Boolean(this._getTitle())}_getTipElement(){return this.tip||(this.tip=this._createTipElement(this._newContent||this._getContentForTemplate())),this.tip}_createTipElement(e){const t=this._getTemplateFactory(e).toHtml();if(!t)return null;t.classList.remove(xo,So),t.classList.add(`bs-${this.constructor.NAME}-auto`);const o=(e=>{do{e+=Math.floor(1e6*Math.random())}while(document.getElementById(e));return e})(this.constructor.NAME).toString();return t.setAttribute("id",o),this._isAnimated()&&t.classList.add(xo),t}setContent(e){this._newContent=e,this._isShown()&&(this._disposePopper(),this.show())}_getTemplateFactory(e){return this._templateFactory?this._templateFactory.changeContent(e):this._templateFactory=new Co({...this._config,content:e,extraClass:this._resolvePossibleFunction(this._config.customClass)}),this._templateFactory}_getContentForTemplate(){return{".tooltip-inner":this._getTitle()}}_getTitle(){return this._resolvePossibleFunction(this._config.title)||this._element.getAttribute("data-bs-original-title")}_initializeOnDelegatedTarget(e){return this.constructor.getOrCreateInstance(e.delegateTarget,this._getDelegateConfig())}_isAnimated(){return this._config.animation||this.tip&&this.tip.classList.contains(xo)}_isShown(){return this.tip&&this.tip.classList.contains(So)}_createPopper(e){const t=v(this._config.placement,[this,e,this._element]),o=No[t.toUpperCase()];return i.createPopper(this._element,e,this._getPopperConfig(o))}_getOffset(){const{offset:e}=this._config;return"string"==typeof e?e.split(",").map((e=>Number.parseInt(e,10))):"function"==typeof e?t=>e(t,this._element):e}_resolvePossibleFunction(e){return v(e,[this._element])}_getPopperConfig(e){const t={placement:e,modifiers:[{name:"flip",options:{fallbackPlacements:this._config.fallbackPlacements}},{name:"offset",options:{offset:this._getOffset()}},{name:"preventOverflow",options:{boundary:this._config.boundary}},{name:"arrow",options:{element:`.${this.constructor.NAME}-arrow`}},{name:"preSetPlacement",enabled:!0,phase:"beforeMain",fn:e=>{this._getTipElement().setAttribute("data-popper-placement",e.state.placement)}}]};return{...t,...v(this._config.popperConfig,[t])}}_setListeners(){const e=this._config.trigger.split(" ");for(const t of e)if("click"===t)I.on(this._element,this.constructor.eventName("click"),this._config.selector,(e=>{this._initializeOnDelegatedTarget(e).toggle()}));else if("manual"!==t){const e=t===Lo?this.constructor.eventName("mouseenter"):this.constructor.eventName("focusin"),o=t===Lo?this.constructor.eventName("mouseleave"):this.constructor.eventName("focusout");I.on(this._element,e,this._config.selector,(e=>{const t=this._initializeOnDelegatedTarget(e);t._activeTrigger["focusin"===e.type?Do:Lo]=!0,t._enter()})),I.on(this._element,o,this._config.selector,(e=>{const t=this._initializeOnDelegatedTarget(e);t._activeTrigger["focusout"===e.type?Do:Lo]=t._element.contains(e.relatedTarget),t._leave()}))}this._hideModalHandler=()=>{this._element&&this.hide()},I.on(this._element.closest(Po),ko,this._hideModalHandler)}_fixTitle(){const e=this._element.getAttribute("title");e&&(this._element.getAttribute("aria-label")||this._element.textContent.trim()||this._element.setAttribute("aria-label",e),this._element.setAttribute("data-bs-original-title",e),this._element.removeAttribute("title"))}_enter(){this._isShown()||this._isHovered?this._isHovered=!0:(this._isHovered=!0,this._setTimeout((()=>{this._isHovered&&this.show()}),this._config.delay.show))}_leave(){this._isWithActiveTrigger()||(this._isHovered=!1,this._setTimeout((()=>{this._isHovered||this.hide()}),this._config.delay.hide))}_setTimeout(e,t){clearTimeout(this._timeout),this._timeout=setTimeout(e,t)}_isWithActiveTrigger(){return Object.values(this._activeTrigger).includes(!0)}_getConfig(e){const t=q.getDataAttributes(this._element);for(const e of Object.keys(t))To.has(e)&&delete t[e];return e={...t,..."object"==typeof e&&e?e:{}},e=this._mergeConfigObj(e),e=this._configAfterMerge(e),this._typeCheckConfig(e),e}_configAfterMerge(e){return e.container=!1===e.container?document.body:d(e.container),"number"==typeof e.delay&&(e.delay={show:e.delay,hide:e.delay}),"number"==typeof e.title&&(e.title=e.title.toString()),"number"==typeof e.content&&(e.content=e.content.toString()),e}_getDelegateConfig(){const e={};for(const[t,o]of Object.entries(this._config))this.constructor.Default[t]!==o&&(e[t]=o);return e.selector=!1,e.trigger="manual",e}_disposePopper(){this._popper&&(this._popper.destroy(),this._popper=null),this.tip&&(this.tip.remove(),this.tip=null)}static jQueryInterface(e){return this.each((function(){const t=Io.getOrCreateInstance(this,e);if("string"==typeof e){if(void 0===t[e])throw new TypeError(`No method named "${e}"`);t[e]()}}))}}b(Io);const Ho={...Io.Default,content:"",offset:[0,8],placement:"right",template:'<div class="popover" role="tooltip"><div class="popover-arrow"></div><h3 class="popover-header"></h3><div class="popover-body"></div></div>',trigger:"click"},Fo={...Io.DefaultType,content:"(null|string|element|function)"};class Wo extends Io{static get Default(){return Ho}static get DefaultType(){return Fo}static get NAME(){return"popover"}_isWithContent(){return this._getTitle()||this._getContent()}_getContentForTemplate(){return{".popover-header":this._getTitle(),".popover-body":this._getContent()}}_getContent(){return this._resolvePossibleFunction(this._config.content)}static jQueryInterface(e){return this.each((function(){const t=Wo.getOrCreateInstance(this,e);if("string"==typeof e){if(void 0===t[e])throw new TypeError(`No method named "${e}"`);t[e]()}}))}}b(Wo);const Bo=".bs.scrollspy",Ro=`activate${Bo}`,qo=`click${Bo}`,Vo=`load${Bo}.data-api`,zo="active",Xo="[href]",Ko=".nav-link",Yo=`${Ko}, .nav-item > ${Ko}, .list-group-item`,Qo={offset:null,rootMargin:"0px 0px -25%",smoothScroll:!1,target:null,threshold:[.1,.5,1]},Uo={offset:"(number|null)",rootMargin:"string",smoothScroll:"boolean",target:"element",threshold:"array"};class Go extends z{constructor(e,t){super(e,t),this._targetLinks=new Map,this._observableSections=new Map,this._rootElement="visible"===getComputedStyle(this._element).overflowY?null:this._element,this._activeTarget=null,this._observer=null,this._previousScrollData={visibleEntryTop:0,parentScrollTop:0},this.refresh()}static get Default(){return Qo}static get DefaultType(){return Uo}static get NAME(){return"scrollspy"}refresh(){this._initializeTargetsAndObservables(),this._maybeEnableSmoothScroll(),this._observer?this._observer.disconnect():this._observer=this._getNewObserver();for(const e of this._observableSections.values())this._observer.observe(e)}dispose(){this._observer.disconnect(),super.dispose()}_configAfterMerge(e){return e.target=d(e.target)||document.body,e.rootMargin=e.offset?`${e.offset}px 0px -30%`:e.rootMargin,"string"==typeof e.threshold&&(e.threshold=e.threshold.split(",").map((e=>Number.parseFloat(e)))),e}_maybeEnableSmoothScroll(){this._config.smoothScroll&&(I.off(this._config.target,qo),I.on(this._config.target,qo,Xo,(e=>{const t=this._observableSections.get(e.target.hash);if(t){e.preventDefault();const o=this._rootElement||window,s=t.offsetTop-this._element.offsetTop;if(o.scrollTo)return void o.scrollTo({top:s,behavior:"smooth"});o.scrollTop=s}})))}_getNewObserver(){const e={root:this._rootElement,threshold:this._config.threshold,rootMargin:this._config.rootMargin};return new IntersectionObserver((e=>this._observerCallback(e)),e)}_observerCallback(e){const t=e=>this._targetLinks.get(`#${e.target.id}`),o=e=>{this._previousScrollData.visibleEntryTop=e.target.offsetTop,this._process(t(e))},s=(this._rootElement||document.documentElement).scrollTop,i=s>=this._previousScrollData.parentScrollTop;this._previousScrollData.parentScrollTop=s;for(const n of e){if(!n.isIntersecting){this._activeTarget=null,this._clearActiveClass(t(n));continue}const e=n.target.offsetTop>=this._previousScrollData.visibleEntryTop;if(i&&e){if(o(n),!s)return}else i||e||o(n)}}_initializeTargetsAndObservables(){this._targetLinks=new Map,this._observableSections=new Map;const e=K.find(Xo,this._config.target);for(const t of e){if(!t.hash||u(t))continue;const e=K.findOne(t.hash,this._element);c(e)&&(this._targetLinks.set(t.hash,t),this._observableSections.set(t.hash,e))}}_process(e){this._activeTarget!==e&&(this._clearActiveClass(this._config.target),this._activeTarget=e,e.classList.add(zo),this._activateParents(e),I.trigger(this._element,Ro,{relatedTarget:e}))}_activateParents(e){if(e.classList.contains("dropdown-item"))K.findOne(".dropdown-toggle",e.closest(".dropdown")).classList.add(zo);else for(const t of K.parents(e,".nav, .list-group"))for(const e of K.prev(t,Yo))e.classList.add(zo)}_clearActiveClass(e){e.classList.remove(zo);const t=K.find(`${Xo}.${zo}`,e);for(const e of t)e.classList.remove(zo)}static jQueryInterface(e){return this.each((function(){const t=Go.getOrCreateInstance(this,e);if("string"==typeof e){if(void 0===t[e]||e.startsWith("_")||"constructor"===e)throw new TypeError(`No method named "${e}"`);t[e]()}}))}}I.on(window,Vo,(()=>{for(const e of K.find('[data-bs-spy="scroll"]'))Go.getOrCreateInstance(e)})),b(Go);const Jo=".bs.tab",Zo=`hide${Jo}`,es=`hidden${Jo}`,ts=`show${Jo}`,os=`shown${Jo}`,ss=`click${Jo}`,is=`keydown${Jo}`,ns=`load${Jo}`,rs="ArrowLeft",ls="ArrowRight",as="ArrowUp",ds="ArrowDown",cs="active",us="fade",ps="show",fs=":not(.dropdown-toggle)",ms='[data-bs-toggle="tab"], [data-bs-toggle="pill"], [data-bs-toggle="list"]',hs=`${`.nav-link${fs}, .list-group-item${fs}, [role="tab"]${fs}`}, ${ms}`,gs=`.${cs}[data-bs-toggle="tab"], .${cs}[data-bs-toggle="pill"], .${cs}[data-bs-toggle="list"]`;class _s extends z{constructor(e){super(e),this._parent=this._element.closest('.list-group, .nav, [role="tablist"]'),this._parent&&(this._setInitialAttributes(this._parent,this._getChildren()),I.on(this._element,is,(e=>this._keydown(e))))}static get NAME(){return"tab"}show(){const e=this._element;if(this._elemIsActive(e))return;const t=this._getActiveElem(),o=t?I.trigger(t,Zo,{relatedTarget:e}):null;I.trigger(e,ts,{relatedTarget:t}).defaultPrevented||o&&o.defaultPrevented||(this._deactivate(t,e),this._activate(e,t))}_activate(e,t){if(!e)return;e.classList.add(cs),this._activate(K.getElementFromSelector(e));this._queueCallback((()=>{"tab"===e.getAttribute("role")?(e.removeAttribute("tabindex"),e.setAttribute("aria-selected",!0),this._toggleDropDown(e,!0),I.trigger(e,os,{relatedTarget:t})):e.classList.add(ps)}),e,e.classList.contains(us))}_deactivate(e,t){if(!e)return;e.classList.remove(cs),e.blur(),this._deactivate(K.getElementFromSelector(e));this._queueCallback((()=>{"tab"===e.getAttribute("role")?(e.setAttribute("aria-selected",!1),e.setAttribute("tabindex","-1"),this._toggleDropDown(e,!1),I.trigger(e,es,{relatedTarget:t})):e.classList.remove(ps)}),e,e.classList.contains(us))}_keydown(e){if(![rs,ls,as,ds].includes(e.key))return;e.stopPropagation(),e.preventDefault();const t=[ls,ds].includes(e.key),o=y(this._getChildren().filter((e=>!u(e))),e.target,t,!0);o&&(o.focus({preventScroll:!0}),_s.getOrCreateInstance(o).show())}_getChildren(){return K.find(hs,this._parent)}_getActiveElem(){return this._getChildren().find((e=>this._elemIsActive(e)))||null}_setInitialAttributes(e,t){this._setAttributeIfNotExists(e,"role","tablist");for(const e of t)this._setInitialAttributesOnChild(e)}_setInitialAttributesOnChild(e){e=this._getInnerElement(e);const t=this._elemIsActive(e),o=this._getOuterElement(e);e.setAttribute("aria-selected",t),o!==e&&this._setAttributeIfNotExists(o,"role","presentation"),t||e.setAttribute("tabindex","-1"),this._setAttributeIfNotExists(e,"role","tab"),this._setInitialAttributesOnTargetPanel(e)}_setInitialAttributesOnTargetPanel(e){const t=K.getElementFromSelector(e);t&&(this._setAttributeIfNotExists(t,"role","tabpanel"),e.id&&this._setAttributeIfNotExists(t,"aria-labelledby",`#${e.id}`))}_toggleDropDown(e,t){const o=this._getOuterElement(e);if(!o.classList.contains("dropdown"))return;const s=(e,s)=>{const i=K.findOne(e,o);i&&i.classList.toggle(s,t)};s(".dropdown-toggle",cs),s(".dropdown-menu",ps),o.setAttribute("aria-expanded",t)}_setAttributeIfNotExists(e,t,o){e.hasAttribute(t)||e.setAttribute(t,o)}_elemIsActive(e){return e.classList.contains(cs)}_getInnerElement(e){return e.matches(hs)?e:K.findOne(hs,e)}_getOuterElement(e){return e.closest(".nav-item, .list-group-item")||e}static jQueryInterface(e){return this.each((function(){const t=_s.getOrCreateInstance(this);if("string"==typeof e){if(void 0===t[e]||e.startsWith("_")||"constructor"===e)throw new TypeError(`No method named "${e}"`);t[e]()}}))}}I.on(document,ss,ms,(function(e){["A","AREA"].includes(this.tagName)&&e.preventDefault(),u(this)||_s.getOrCreateInstance(this).show()})),I.on(window,ns,(()=>{for(const e of K.find(gs))_s.getOrCreateInstance(e)})),b(_s);const bs=".bs.toast",vs=`mouseover${bs}`,js=`mouseout${bs}`,ys=`focusin${bs}`,ws=`focusout${bs}`,Es=`hide${bs}`,As=`hidden${bs}`,Os=`show${bs}`,Cs=`shown${bs}`,Ts="hide",xs="show",Ss="showing",Ps={animation:"boolean",autohide:"boolean",delay:"number"},ks={animation:!0,autohide:!0,delay:5e3};class Ls extends z{constructor(e,t){super(e,t),this._timeout=null,this._hasMouseInteraction=!1,this._hasKeyboardInteraction=!1,this._setListeners()}static get Default(){return ks}static get DefaultType(){return Ps}static get NAME(){return"toast"}show(){if(I.trigger(this._element,Os).defaultPrevented)return;this._clearTimeout(),this._config.animation&&this._element.classList.add("fade");this._element.classList.remove(Ts),m(this._element),this._element.classList.add(xs,Ss),this._queueCallback((()=>{this._element.classList.remove(Ss),I.trigger(this._element,Cs),this._maybeScheduleHide()}),this._element,this._config.animation)}hide(){if(!this.isShown())return;if(I.trigger(this._element,Es).defaultPrevented)return;this._element.classList.add(Ss),this._queueCallback((()=>{this._element.classList.add(Ts),this._element.classList.remove(Ss,xs),I.trigger(this._element,As)}),this._element,this._config.animation)}dispose(){this._clearTimeout(),this.isShown()&&this._element.classList.remove(xs),super.dispose()}isShown(){return this._element.classList.contains(xs)}_maybeScheduleHide(){this._config.autohide&&(this._hasMouseInteraction||this._hasKeyboardInteraction||(this._timeout=setTimeout((()=>{this.hide()}),this._config.delay)))}_onInteraction(e,t){switch(e.type){case"mouseover":case"mouseout":this._hasMouseInteraction=t;break;case"focusin":case"focusout":this._hasKeyboardInteraction=t}if(t)return void this._clearTimeout();const o=e.relatedTarget;this._element===o||this._element.contains(o)||this._maybeScheduleHide()}_setListeners(){I.on(this._element,vs,(e=>this._onInteraction(e,!0))),I.on(this._element,js,(e=>this._onInteraction(e,!1))),I.on(this._element,ys,(e=>this._onInteraction(e,!0))),I.on(this._element,ws,(e=>this._onInteraction(e,!1)))}_clearTimeout(){clearTimeout(this._timeout),this._timeout=null}static jQueryInterface(e){return this.each((function(){const t=Ls.getOrCreateInstance(this,e);if("string"==typeof e){if(void 0===t[e])throw new TypeError(`No method named "${e}"`);t[e](this)}}))}}Y(Ls),b(Ls)},"./node_modules/axios/index.js":(e,t,o)=>{o.r(t),o.d(t,{Axios:()=>i,AxiosError:()=>n,AxiosHeaders:()=>h,Cancel:()=>u,CancelToken:()=>a,CanceledError:()=>r,HttpStatusCode:()=>g,VERSION:()=>d,all:()=>c,default:()=>s.default,formToJSON:()=>_,isAxiosError:()=>p,isCancel:()=>l,mergeConfig:()=>b,spread:()=>f,toFormData:()=>m});var s=o("./node_modules/axios/lib/axios.js");const{Axios:i,AxiosError:n,CanceledError:r,isCancel:l,CancelToken:a,VERSION:d,all:c,Cancel:u,isAxiosError:p,spread:f,toFormData:m,AxiosHeaders:h,HttpStatusCode:g,formToJSON:_,mergeConfig:b}=s.default}},e=>{var t=t=>e(e.s=t);e.O(0,["vendors-node_modules_lodash_lodash_js-node_modules_axios_lib_axios_js"],(()=>(t("./node_modules/lodash/lodash.js"),t("./node_modules/axios/index.js"),t("./node_modules/bootstrap/dist/js/bootstrap.esm.js"))));e.O()}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,